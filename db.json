{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"67fe1579a6aa4b55c2a3f0104358612739798d46","modified":1473329192640},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1473327752609},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1473327752609},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1473327752609},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1473327752609},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1473327752609},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1473327752610},{"_id":"source/_posts/bonTemplate.md","hash":"e5af437b9eda979adb386c7c5355698285b5a04b","modified":1473333928837},{"_id":"source/_posts/miniExtjs.md","hash":"baf62d01e1767e252ee319ed1a26dfc80508e418","modified":1473334082758},{"_id":"source/_posts/myPromise.md","hash":"335203c941a55827fc408d7f1220406dabe0c0de","modified":1473334102669},{"_id":"source/_posts/observable.md","hash":"a427e82ee4daa4802a98ab963b0484289e568492","modified":1473333854372},{"_id":"source/_posts/something4Closure.md","hash":"2615741b6afec94ed7dd0b619a3c69a220c49230","modified":1473333816950},{"_id":"source/_posts/zabbx1.md","hash":"7c7d836d9151a1f49ec0aa5db5d42adf34cca847","modified":1473333676335},{"_id":"source/_posts/zabbx2.md","hash":"eb5ebfdeecacb66dea80d1166f50b941e8e85e4d","modified":1473333704251},{"_id":"source/_posts/zabbx3.md","hash":"9de33e661acb540970087443e234966b388b507c","modified":1473333726115},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1473327752609},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1473327752609},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1473327752609},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1473327752609},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1473327752609},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1473327752609},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1473327752609},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1473327752610},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1473327752610},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1473327752610},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1473327752610},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1473327752610},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1473327752610},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1473327752610},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1473327752610},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1473327752609},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1473327752609},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1473327752609},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1473327752609},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1473327752609},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1473327752609},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1473327752609},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1473327752609},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1473327752609},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1473327752609},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1473327752609},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1473327752609},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1473327752609},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1473327752610},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1473327752610},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1473327752610},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1473327752611},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1473327752614},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1473327752614},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1473327752614},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1473327752614},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1473327752614},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1473327752614},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1473327752614},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1473327752614},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1473327752614},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1473327752614},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1473327752614},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1473327752609},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1473327752609},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1473327752609},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1473327752609},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1473327752609},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1473327752609},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1473327752610},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1473327752610},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1473327752610},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1473327752610},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1473327752610},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1473327752610},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1473327752610},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1473327752610},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1473327752610},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1473327752610},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1473327752610},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1473327752610},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1473327752611},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1473327752611},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1473327752613},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1473327752614},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1473327752614},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1473327752614},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1473327752614},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1473327752614},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1473327752614},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1473327752612},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1473327752612},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1473327752614}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"高效，轻量，优雅的模板引擎~~","date":"2016-08-31T09:07:07.000Z","_content":"\n# bonTemplate\n* 高效(100条数据执行10000次一共耗时50多ms，我本机上的测试结果，视电脑配置)\n* 轻量(压缩前也才3K多)\n* 支持循环<each>\n* 支持条件判断<if>\n* 支持嵌套\n* 支持表达式\n* 支持自定义格式化函数\n* 使用简单，易懂\n\nhttps://github.com/bonjs/bonTemplate\n\n####安装和启动\n```Bash\ngit clone https://github.com/bonjs/bonTemplate.git\nnpm install\nnode app\n```\n\n访问http://127.0.0.1:3000\n\n####模板\n```\n<script id=tpl type=\"html\">\n\t<div>{this.name}</div>\n\t<div>{this.sex}</div>\n\t<div>{this.email}</div>\n</script>\n```\n####数据\n```javascript\nvar data = {\n\tname\t: 'bonTemplate',\n\tsex\t\t: 'm',\n\temail\t: 'ske@163.com'\n}\n```\n####调用方式\n```javascript\nvar html = document.getElementById('tpl').innerHTML\nvar str = bon.render(html, data);\na.innerHTML = str;\n```\n\n\n##可嵌套的循环标签\n```\n<each this.userList=u>\n\t<div>{u.name}</div>\n\t<div>{u.sex}</div>\n\t<div>{u.email}</div>\n\t<each u.hobbys=h>\n\t\t<label>{h}</label>\n\t</each>\n</each>\n```\n```javascript\n{\n\tuserList: [\n\t\t{\n\t\t\tname\t: 'bonTemplate',\n\t\t\tsex\t\t: 'm',\n\t\t\temail\t: 'ske@163.com',\n\t\t\thobbys: [\n\t\t\t\t'吃',　'喝',　'玩',　'乐'\n\t\t\t]\n\t\t}, {\n\t\t\tname\t: 'bonTemplate',\n\t\t\tsex\t\t: 'm',\n\t\t\temail\t: 'ske@163.com'，\n\t\t\thobbys: [\n\t\t\t\t'吃',　'喝',　'玩',　'乐'\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n##条件标签\n```\n<div>\n\t<div>{this.name}</div>\n\t<div>{this.sex}</div>\n\t<div>{this.email}</div>\n\t<if this.sex == 'm'>\n\t\t爱好数码\n\t</if>\n</div>\n```\n```javascript\n{\n\tname\t: 'bonTemplate',\n\tsex\t\t: 'm',\n\temail\t: 'ske@163.com'\n}\n```\n\n##表达式\n```\n<div>\n\t<div>{this.name}</div>\n\t<div>{this.sex == 'm' ? '男' : '女'}</div>\n\t<div>{this.email}</div>\n</div>\n```\n```javascript\n{\n\tname\t: 'bonTemplate',\n\tsex\t\t: 'm',\n\temail\t: 'ske@163.com'\n}\n```\n\n##自定义格式化函数\n```javascript\nbon.addFun({\n\tmyFun : function(v) {\n\t\treturn v == 'm' ? '男' : '女';\t\n\t}\n});\n```\n\n```\n<div>\n\t<div>{this.name}</div>\n\t<div>{this.sex:myFun}</div>\n\t<div>{this.email}</div>\n</div>\n```\n```javascript\n{\n\tname\t: 'bonTemplate',\n\tsex\t\t: 'm',\n\temail\t: 'ske@163.com'\n}\n```\n\n##全家桶\n```javascript\nbon.addFun({\n\tformateEmail: function(email) {\n\t\treturn 'Email: ' + email;\n\t}\t\n})\n```\n\n```\n<each this.userList=u>\n\t<div>{u.name}</div>\n\t<div>{u.sex == 'm' ? '男' : '女'}</div>\n\t<div>{u.email:formateEmail}</div>\n\t<each u.hobbys=h>\n\t\t<label>{h}</label>\n\t</each>\n\t<if u.sex == 'm'>\n\t\t爱好数码\n\t</if>\n\t<if u.sex == 'f'>\n\t\t爱好买衣服\n\t</if>\n</each>\n```\n```javascript\n{\n\tuserList: [\n\t\t{\n\t\t\tname\t: 'bonTemplate',\n\t\t\tsex\t\t: 'm',\n\t\t\temail\t: 'ske@163.com',\n\t\t\thobbys: [\n\t\t\t\t'吃',　'喝',　'玩',　'乐'\n\t\t\t]\n\t\t}, {\n\t\t\tname\t: 'she',\n\t\t\tsex\t\t: 'f',\n\t\t\temail\t: 'fdsafs@163.com'，\n\t\t\thobbys: [\n\t\t\t\t'吃',　'喝',　'玩',　'乐'\n\t\t\t]\n\t\t}\n\t]\n}\n```\n","source":"_posts/bonTemplate.md","raw":"---\ntitle: 高效，轻量，优雅的模板引擎~~ \ndate: 2016-08-31 17:07:07\ntags:\n\n---\n\n# bonTemplate\n* 高效(100条数据执行10000次一共耗时50多ms，我本机上的测试结果，视电脑配置)\n* 轻量(压缩前也才3K多)\n* 支持循环<each>\n* 支持条件判断<if>\n* 支持嵌套\n* 支持表达式\n* 支持自定义格式化函数\n* 使用简单，易懂\n\nhttps://github.com/bonjs/bonTemplate\n\n####安装和启动\n```Bash\ngit clone https://github.com/bonjs/bonTemplate.git\nnpm install\nnode app\n```\n\n访问http://127.0.0.1:3000\n\n####模板\n```\n<script id=tpl type=\"html\">\n\t<div>{this.name}</div>\n\t<div>{this.sex}</div>\n\t<div>{this.email}</div>\n</script>\n```\n####数据\n```javascript\nvar data = {\n\tname\t: 'bonTemplate',\n\tsex\t\t: 'm',\n\temail\t: 'ske@163.com'\n}\n```\n####调用方式\n```javascript\nvar html = document.getElementById('tpl').innerHTML\nvar str = bon.render(html, data);\na.innerHTML = str;\n```\n\n\n##可嵌套的循环标签\n```\n<each this.userList=u>\n\t<div>{u.name}</div>\n\t<div>{u.sex}</div>\n\t<div>{u.email}</div>\n\t<each u.hobbys=h>\n\t\t<label>{h}</label>\n\t</each>\n</each>\n```\n```javascript\n{\n\tuserList: [\n\t\t{\n\t\t\tname\t: 'bonTemplate',\n\t\t\tsex\t\t: 'm',\n\t\t\temail\t: 'ske@163.com',\n\t\t\thobbys: [\n\t\t\t\t'吃',　'喝',　'玩',　'乐'\n\t\t\t]\n\t\t}, {\n\t\t\tname\t: 'bonTemplate',\n\t\t\tsex\t\t: 'm',\n\t\t\temail\t: 'ske@163.com'，\n\t\t\thobbys: [\n\t\t\t\t'吃',　'喝',　'玩',　'乐'\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n##条件标签\n```\n<div>\n\t<div>{this.name}</div>\n\t<div>{this.sex}</div>\n\t<div>{this.email}</div>\n\t<if this.sex == 'm'>\n\t\t爱好数码\n\t</if>\n</div>\n```\n```javascript\n{\n\tname\t: 'bonTemplate',\n\tsex\t\t: 'm',\n\temail\t: 'ske@163.com'\n}\n```\n\n##表达式\n```\n<div>\n\t<div>{this.name}</div>\n\t<div>{this.sex == 'm' ? '男' : '女'}</div>\n\t<div>{this.email}</div>\n</div>\n```\n```javascript\n{\n\tname\t: 'bonTemplate',\n\tsex\t\t: 'm',\n\temail\t: 'ske@163.com'\n}\n```\n\n##自定义格式化函数\n```javascript\nbon.addFun({\n\tmyFun : function(v) {\n\t\treturn v == 'm' ? '男' : '女';\t\n\t}\n});\n```\n\n```\n<div>\n\t<div>{this.name}</div>\n\t<div>{this.sex:myFun}</div>\n\t<div>{this.email}</div>\n</div>\n```\n```javascript\n{\n\tname\t: 'bonTemplate',\n\tsex\t\t: 'm',\n\temail\t: 'ske@163.com'\n}\n```\n\n##全家桶\n```javascript\nbon.addFun({\n\tformateEmail: function(email) {\n\t\treturn 'Email: ' + email;\n\t}\t\n})\n```\n\n```\n<each this.userList=u>\n\t<div>{u.name}</div>\n\t<div>{u.sex == 'm' ? '男' : '女'}</div>\n\t<div>{u.email:formateEmail}</div>\n\t<each u.hobbys=h>\n\t\t<label>{h}</label>\n\t</each>\n\t<if u.sex == 'm'>\n\t\t爱好数码\n\t</if>\n\t<if u.sex == 'f'>\n\t\t爱好买衣服\n\t</if>\n</each>\n```\n```javascript\n{\n\tuserList: [\n\t\t{\n\t\t\tname\t: 'bonTemplate',\n\t\t\tsex\t\t: 'm',\n\t\t\temail\t: 'ske@163.com',\n\t\t\thobbys: [\n\t\t\t\t'吃',　'喝',　'玩',　'乐'\n\t\t\t]\n\t\t}, {\n\t\t\tname\t: 'she',\n\t\t\tsex\t\t: 'f',\n\t\t\temail\t: 'fdsafs@163.com'，\n\t\t\thobbys: [\n\t\t\t\t'吃',　'喝',　'玩',　'乐'\n\t\t\t]\n\t\t}\n\t]\n}\n```\n","slug":"bonTemplate","published":1,"updated":"2016-09-08T11:25:28.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisu97po90000vkpvgrpkzxab","content":"<h1 id=\"bonTemplate\"><a href=\"#bonTemplate\" class=\"headerlink\" title=\"bonTemplate\"></a>bonTemplate</h1><ul>\n<li>高效(100条数据执行10000次一共耗时50多ms，我本机上的测试结果，视电脑配置)</li>\n<li>轻量(压缩前也才3K多)</li>\n<li>支持循环<each></each></li>\n<li>支持条件判断<if></if></li>\n<li>支持嵌套</li>\n<li>支持表达式</li>\n<li>支持自定义格式化函数</li>\n<li>使用简单，易懂</li>\n</ul>\n<p><a href=\"https://github.com/bonjs/bonTemplate\" target=\"_blank\" rel=\"external\">https://github.com/bonjs/bonTemplate</a></p>\n<p>####安装和启动<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/bonjs/bonTemplate.git</div><div class=\"line\">npm install</div><div class=\"line\">node app</div></pre></td></tr></table></figure></p>\n<p>访问<a href=\"http://127.0.0.1:3000\" target=\"_blank\" rel=\"external\">http://127.0.0.1:3000</a></p>\n<p>####模板<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script id=tpl type=&quot;html&quot;&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.name&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.sex&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.email&#125;&lt;/div&gt;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>####数据<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = &#123;</div><div class=\"line\">\tname\t: <span class=\"string\">'bonTemplate'</span>,</div><div class=\"line\">\tsex\t\t: <span class=\"string\">'m'</span>,</div><div class=\"line\">\temail\t: <span class=\"string\">'ske@163.com'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>####调用方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> html = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'tpl'</span>).innerHTML</div><div class=\"line\"><span class=\"keyword\">var</span> str = bon.render(html, data);</div><div class=\"line\">a.innerHTML = str;</div></pre></td></tr></table></figure></p>\n<p>##可嵌套的循环标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;each this.userList=u&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;u.name&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;u.sex&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;u.email&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;each u.hobbys=h&gt;</div><div class=\"line\">\t\t&lt;label&gt;&#123;h&#125;&lt;/label&gt;</div><div class=\"line\">\t&lt;/each&gt;</div><div class=\"line\">&lt;/each&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\tuserList: [</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tname\t: <span class=\"string\">'bonTemplate'</span>,</div><div class=\"line\">\t\t\tsex\t\t: <span class=\"string\">'m'</span>,</div><div class=\"line\">\t\t\temail\t: <span class=\"string\">'ske@163.com'</span>,</div><div class=\"line\">\t\t\thobbys: [</div><div class=\"line\">\t\t\t\t<span class=\"string\">'吃'</span>,　<span class=\"string\">'喝'</span>,　<span class=\"string\">'玩'</span>,　<span class=\"string\">'乐'</span></div><div class=\"line\">\t\t\t]</div><div class=\"line\">\t\t&#125;, &#123;</div><div class=\"line\">\t\t\tname\t: <span class=\"string\">'bonTemplate'</span>,</div><div class=\"line\">\t\t\tsex\t\t: <span class=\"string\">'m'</span>,</div><div class=\"line\">\t\t\temail\t: <span class=\"string\">'ske@163.com'</span>，</div><div class=\"line\">\t\t\thobbys: [</div><div class=\"line\">\t\t\t\t<span class=\"string\">'吃'</span>,　<span class=\"string\">'喝'</span>,　<span class=\"string\">'玩'</span>,　<span class=\"string\">'乐'</span></div><div class=\"line\">\t\t\t]</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>##条件标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.name&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.sex&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.email&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;if this.sex == &apos;m&apos;&gt;</div><div class=\"line\">\t\t爱好数码</div><div class=\"line\">\t&lt;/if&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\tname\t: <span class=\"string\">'bonTemplate'</span>,</div><div class=\"line\">\tsex\t\t: <span class=\"string\">'m'</span>,</div><div class=\"line\">\temail\t: <span class=\"string\">'ske@163.com'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>##表达式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.name&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.sex == &apos;m&apos; ? &apos;男&apos; : &apos;女&apos;&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.email&#125;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\tname\t: <span class=\"string\">'bonTemplate'</span>,</div><div class=\"line\">\tsex\t\t: <span class=\"string\">'m'</span>,</div><div class=\"line\">\temail\t: <span class=\"string\">'ske@163.com'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>##自定义格式化函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">bon.addFun(&#123;</div><div class=\"line\">\tmyFun : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> v == <span class=\"string\">'m'</span> ? <span class=\"string\">'男'</span> : <span class=\"string\">'女'</span>;\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.name&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.sex:myFun&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.email&#125;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\tname\t: <span class=\"string\">'bonTemplate'</span>,</div><div class=\"line\">\tsex\t\t: <span class=\"string\">'m'</span>,</div><div class=\"line\">\temail\t: <span class=\"string\">'ske@163.com'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>##全家桶<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">bon.addFun(&#123;</div><div class=\"line\">\tformateEmail: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">email</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">'Email: '</span> + email;</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;each this.userList=u&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;u.name&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;u.sex == &apos;m&apos; ? &apos;男&apos; : &apos;女&apos;&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;u.email:formateEmail&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;each u.hobbys=h&gt;</div><div class=\"line\">\t\t&lt;label&gt;&#123;h&#125;&lt;/label&gt;</div><div class=\"line\">\t&lt;/each&gt;</div><div class=\"line\">\t&lt;if u.sex == &apos;m&apos;&gt;</div><div class=\"line\">\t\t爱好数码</div><div class=\"line\">\t&lt;/if&gt;</div><div class=\"line\">\t&lt;if u.sex == &apos;f&apos;&gt;</div><div class=\"line\">\t\t爱好买衣服</div><div class=\"line\">\t&lt;/if&gt;</div><div class=\"line\">&lt;/each&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\tuserList: [</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tname\t: <span class=\"string\">'bonTemplate'</span>,</div><div class=\"line\">\t\t\tsex\t\t: <span class=\"string\">'m'</span>,</div><div class=\"line\">\t\t\temail\t: <span class=\"string\">'ske@163.com'</span>,</div><div class=\"line\">\t\t\thobbys: [</div><div class=\"line\">\t\t\t\t<span class=\"string\">'吃'</span>,　<span class=\"string\">'喝'</span>,　<span class=\"string\">'玩'</span>,　<span class=\"string\">'乐'</span></div><div class=\"line\">\t\t\t]</div><div class=\"line\">\t\t&#125;, &#123;</div><div class=\"line\">\t\t\tname\t: <span class=\"string\">'she'</span>,</div><div class=\"line\">\t\t\tsex\t\t: <span class=\"string\">'f'</span>,</div><div class=\"line\">\t\t\temail\t: <span class=\"string\">'fdsafs@163.com'</span>，</div><div class=\"line\">\t\t\thobbys: [</div><div class=\"line\">\t\t\t\t<span class=\"string\">'吃'</span>,　<span class=\"string\">'喝'</span>,　<span class=\"string\">'玩'</span>,　<span class=\"string\">'乐'</span></div><div class=\"line\">\t\t\t]</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"bonTemplate\"><a href=\"#bonTemplate\" class=\"headerlink\" title=\"bonTemplate\"></a>bonTemplate</h1><ul>\n<li>高效(100条数据执行10000次一共耗时50多ms，我本机上的测试结果，视电脑配置)</li>\n<li>轻量(压缩前也才3K多)</li>\n<li>支持循环<each></li>\n<li>支持条件判断<if></li>\n<li>支持嵌套</li>\n<li>支持表达式</li>\n<li>支持自定义格式化函数</li>\n<li>使用简单，易懂</li>\n</ul>\n<p><a href=\"https://github.com/bonjs/bonTemplate\">https://github.com/bonjs/bonTemplate</a></p>\n<p>####安装和启动<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/bonjs/bonTemplate.git</div><div class=\"line\">npm install</div><div class=\"line\">node app</div></pre></td></tr></table></figure></p>\n<p>访问<a href=\"http://127.0.0.1:3000\">http://127.0.0.1:3000</a></p>\n<p>####模板<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script id=tpl type=&quot;html&quot;&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.name&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.sex&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.email&#125;&lt;/div&gt;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>####数据<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = &#123;</div><div class=\"line\">\tname\t: <span class=\"string\">'bonTemplate'</span>,</div><div class=\"line\">\tsex\t\t: <span class=\"string\">'m'</span>,</div><div class=\"line\">\temail\t: <span class=\"string\">'ske@163.com'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>####调用方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> html = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'tpl'</span>).innerHTML</div><div class=\"line\"><span class=\"keyword\">var</span> str = bon.render(html, data);</div><div class=\"line\">a.innerHTML = str;</div></pre></td></tr></table></figure></p>\n<p>##可嵌套的循环标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;each this.userList=u&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;u.name&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;u.sex&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;u.email&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;each u.hobbys=h&gt;</div><div class=\"line\">\t\t&lt;label&gt;&#123;h&#125;&lt;/label&gt;</div><div class=\"line\">\t&lt;/each&gt;</div><div class=\"line\">&lt;/each&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\tuserList: [</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tname\t: <span class=\"string\">'bonTemplate'</span>,</div><div class=\"line\">\t\t\tsex\t\t: <span class=\"string\">'m'</span>,</div><div class=\"line\">\t\t\temail\t: <span class=\"string\">'ske@163.com'</span>,</div><div class=\"line\">\t\t\thobbys: [</div><div class=\"line\">\t\t\t\t<span class=\"string\">'吃'</span>,　<span class=\"string\">'喝'</span>,　<span class=\"string\">'玩'</span>,　<span class=\"string\">'乐'</span></div><div class=\"line\">\t\t\t]</div><div class=\"line\">\t\t&#125;, &#123;</div><div class=\"line\">\t\t\tname\t: <span class=\"string\">'bonTemplate'</span>,</div><div class=\"line\">\t\t\tsex\t\t: <span class=\"string\">'m'</span>,</div><div class=\"line\">\t\t\temail\t: <span class=\"string\">'ske@163.com'</span>，</div><div class=\"line\">\t\t\thobbys: [</div><div class=\"line\">\t\t\t\t<span class=\"string\">'吃'</span>,　<span class=\"string\">'喝'</span>,　<span class=\"string\">'玩'</span>,　<span class=\"string\">'乐'</span></div><div class=\"line\">\t\t\t]</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>##条件标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.name&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.sex&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.email&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;if this.sex == &apos;m&apos;&gt;</div><div class=\"line\">\t\t爱好数码</div><div class=\"line\">\t&lt;/if&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\tname\t: <span class=\"string\">'bonTemplate'</span>,</div><div class=\"line\">\tsex\t\t: <span class=\"string\">'m'</span>,</div><div class=\"line\">\temail\t: <span class=\"string\">'ske@163.com'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>##表达式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.name&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.sex == &apos;m&apos; ? &apos;男&apos; : &apos;女&apos;&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.email&#125;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\tname\t: <span class=\"string\">'bonTemplate'</span>,</div><div class=\"line\">\tsex\t\t: <span class=\"string\">'m'</span>,</div><div class=\"line\">\temail\t: <span class=\"string\">'ske@163.com'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>##自定义格式化函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">bon.addFun(&#123;</div><div class=\"line\">\tmyFun : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> v == <span class=\"string\">'m'</span> ? <span class=\"string\">'男'</span> : <span class=\"string\">'女'</span>;\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.name&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.sex:myFun&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;this.email&#125;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\tname\t: <span class=\"string\">'bonTemplate'</span>,</div><div class=\"line\">\tsex\t\t: <span class=\"string\">'m'</span>,</div><div class=\"line\">\temail\t: <span class=\"string\">'ske@163.com'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>##全家桶<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">bon.addFun(&#123;</div><div class=\"line\">\tformateEmail: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">email</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">'Email: '</span> + email;</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;each this.userList=u&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;u.name&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;u.sex == &apos;m&apos; ? &apos;男&apos; : &apos;女&apos;&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;&#123;u.email:formateEmail&#125;&lt;/div&gt;</div><div class=\"line\">\t&lt;each u.hobbys=h&gt;</div><div class=\"line\">\t\t&lt;label&gt;&#123;h&#125;&lt;/label&gt;</div><div class=\"line\">\t&lt;/each&gt;</div><div class=\"line\">\t&lt;if u.sex == &apos;m&apos;&gt;</div><div class=\"line\">\t\t爱好数码</div><div class=\"line\">\t&lt;/if&gt;</div><div class=\"line\">\t&lt;if u.sex == &apos;f&apos;&gt;</div><div class=\"line\">\t\t爱好买衣服</div><div class=\"line\">\t&lt;/if&gt;</div><div class=\"line\">&lt;/each&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\tuserList: [</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tname\t: <span class=\"string\">'bonTemplate'</span>,</div><div class=\"line\">\t\t\tsex\t\t: <span class=\"string\">'m'</span>,</div><div class=\"line\">\t\t\temail\t: <span class=\"string\">'ske@163.com'</span>,</div><div class=\"line\">\t\t\thobbys: [</div><div class=\"line\">\t\t\t\t<span class=\"string\">'吃'</span>,　<span class=\"string\">'喝'</span>,　<span class=\"string\">'玩'</span>,　<span class=\"string\">'乐'</span></div><div class=\"line\">\t\t\t]</div><div class=\"line\">\t\t&#125;, &#123;</div><div class=\"line\">\t\t\tname\t: <span class=\"string\">'she'</span>,</div><div class=\"line\">\t\t\tsex\t\t: <span class=\"string\">'f'</span>,</div><div class=\"line\">\t\t\temail\t: <span class=\"string\">'fdsafs@163.com'</span>，</div><div class=\"line\">\t\t\thobbys: [</div><div class=\"line\">\t\t\t\t<span class=\"string\">'吃'</span>,　<span class=\"string\">'喝'</span>,　<span class=\"string\">'玩'</span>,　<span class=\"string\">'乐'</span></div><div class=\"line\">\t\t\t]</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"制作一个迷你版的Ext.js精简策略(转)","date":"2016-06-16T11:12:57.000Z","_content":"\next 是我顶喜欢的一款js框架, 原因不仅仅只是因为它有着很专业的ui组件, 更要的是它有着很漂亮的类管理机制(尤其是ext4), 它为js程序员们定义了一整套编码规则, 使我们可以把js写得像java一样, ext 自身的代码就是用的这种编码规则,  所以大几万代码依然管理得井井有条. 如果你只是用js写些表单验证之类的小动作, 那么你肯定体会不到编码规则的重要性.  js这种语言, 如果是团队开发, 制作较为复杂的富客户端应用,  如果不强制统一编码风格, 维护起来那将会是场灾难.\n   所以我有时自己写js玩的时候, 为了使自己的代码更漂亮, 也会用到ext. 当然, 是精简后的ext.\n   构建一个最简易的ext其实非常简单. 我用的是当前最新的版本: ext-4.0.7-gpl.\n   \n此文转自: http://www.makaidong.com\n \n1. 首先下载源码, 解压, 找到以下文件:\n~~~javascript\n/src/core/src/ext.js\n      /src/core/src/lang/number.js\n      /src/core/src/lang/string.js\n      /src/core/src/lang/date.js \n\n      /src/core/src/lang/object.js\n      /src/core/src/lang/array.js \n      /src/core/src/lang/function.js \n      /src/core/src/class/base.js \n      /src/core/src/class/class.js  \n      /src/core/src/class/classmanager.js \n      /src/core/src/class/loader.js  \n      /src/core/src/lang/error.js  \n~~~\n\n 2. 把这些文件复制出来, 然后在一个页面中依次引用, 注意顺序不要乱, 然后用编辑器打开error.js , 在文件的最后部分注释掉一行代码:\n     ....... \n~~~javascript\nfunction poll () {\n        timer = win.setinterval(notify, 1000);\n    }\n\n    // window.onerror sounds ideal but it prevents the built-in error dialog from doing\n    // its (better) thing.\n    //poll();   //把这一行注释掉\n})();\n//</debug>\n~~~\n\n\n  3. 然后, 我们可以随便写一些代码了, 如果不报错, 那么就成功了:\n~~~javascript\next.define(\"ext.foo\",{ \n  name: null,\n\n  constructor: function(){\n    this.name = \"big-foo\";\n  },\n\n  say: function(){\n    alert(\"my name is \"+ this.name);\n  }\n});\n\nnew ext.foo().say();\n~~~\n\n\n这些文件其实也可以按顺序一起打包压缩, 加入到自己项目中, 我上面列出的那些文件压缩后只有50几kb...嘿嘿...袖珍版ext.  因为代码没有\n\n\n涉及到浏览器对象操作, 所以这个小框架甚至可以移植到 node.js 环境下使用, 只是由于ext这个对象会被自动加在顶层名称空间上, 所以在模块引用的时候会和node的习惯上有些不同, 当然这都是题外话了, 有兴趣的童鞋可以去玩玩, 有新发现记得告诉我.\n\n\n \n我之前说的没错吧, 操作很简单的. 不过这里面仅仅只启用了ext最核心最基础的一部分功能, 也就是类管理. 从这些 js文件的名字和在源码中得摆放目录的名子中就可以看出来, 放在 lang 目录下都是些对js 基础数据类型的扩展, class 目录下的都是类管理模块. 这么看来, 其实只要了解ext组件间的依赖关系(都可以在api中查到的), 按顺序加入相应的文件, 要随意地div 自己的ext 也不是一件难事.\n     \n还有一点值得说明, 我注释掉的那一行代码, 如果不注释, 浏览器会不停地报错. 代码中的注释说这是一个用于错误收集的机制, 我看并不影响ext核心功能的使用, 所以就注释了. 我不太能理解ext为什么要一开始就注册一个定时器去定时执行一些代码, 有知道的童鞋能告诉我么?","source":"_posts/miniExtjs.md","raw":"---\ntitle: 制作一个迷你版的Ext.js精简策略(转)\ndate: 2016-06-16 19:12:57\ntags:\n---\n\next 是我顶喜欢的一款js框架, 原因不仅仅只是因为它有着很专业的ui组件, 更要的是它有着很漂亮的类管理机制(尤其是ext4), 它为js程序员们定义了一整套编码规则, 使我们可以把js写得像java一样, ext 自身的代码就是用的这种编码规则,  所以大几万代码依然管理得井井有条. 如果你只是用js写些表单验证之类的小动作, 那么你肯定体会不到编码规则的重要性.  js这种语言, 如果是团队开发, 制作较为复杂的富客户端应用,  如果不强制统一编码风格, 维护起来那将会是场灾难.\n   所以我有时自己写js玩的时候, 为了使自己的代码更漂亮, 也会用到ext. 当然, 是精简后的ext.\n   构建一个最简易的ext其实非常简单. 我用的是当前最新的版本: ext-4.0.7-gpl.\n   \n此文转自: http://www.makaidong.com\n \n1. 首先下载源码, 解压, 找到以下文件:\n~~~javascript\n/src/core/src/ext.js\n      /src/core/src/lang/number.js\n      /src/core/src/lang/string.js\n      /src/core/src/lang/date.js \n\n      /src/core/src/lang/object.js\n      /src/core/src/lang/array.js \n      /src/core/src/lang/function.js \n      /src/core/src/class/base.js \n      /src/core/src/class/class.js  \n      /src/core/src/class/classmanager.js \n      /src/core/src/class/loader.js  \n      /src/core/src/lang/error.js  \n~~~\n\n 2. 把这些文件复制出来, 然后在一个页面中依次引用, 注意顺序不要乱, 然后用编辑器打开error.js , 在文件的最后部分注释掉一行代码:\n     ....... \n~~~javascript\nfunction poll () {\n        timer = win.setinterval(notify, 1000);\n    }\n\n    // window.onerror sounds ideal but it prevents the built-in error dialog from doing\n    // its (better) thing.\n    //poll();   //把这一行注释掉\n})();\n//</debug>\n~~~\n\n\n  3. 然后, 我们可以随便写一些代码了, 如果不报错, 那么就成功了:\n~~~javascript\next.define(\"ext.foo\",{ \n  name: null,\n\n  constructor: function(){\n    this.name = \"big-foo\";\n  },\n\n  say: function(){\n    alert(\"my name is \"+ this.name);\n  }\n});\n\nnew ext.foo().say();\n~~~\n\n\n这些文件其实也可以按顺序一起打包压缩, 加入到自己项目中, 我上面列出的那些文件压缩后只有50几kb...嘿嘿...袖珍版ext.  因为代码没有\n\n\n涉及到浏览器对象操作, 所以这个小框架甚至可以移植到 node.js 环境下使用, 只是由于ext这个对象会被自动加在顶层名称空间上, 所以在模块引用的时候会和node的习惯上有些不同, 当然这都是题外话了, 有兴趣的童鞋可以去玩玩, 有新发现记得告诉我.\n\n\n \n我之前说的没错吧, 操作很简单的. 不过这里面仅仅只启用了ext最核心最基础的一部分功能, 也就是类管理. 从这些 js文件的名字和在源码中得摆放目录的名子中就可以看出来, 放在 lang 目录下都是些对js 基础数据类型的扩展, class 目录下的都是类管理模块. 这么看来, 其实只要了解ext组件间的依赖关系(都可以在api中查到的), 按顺序加入相应的文件, 要随意地div 自己的ext 也不是一件难事.\n     \n还有一点值得说明, 我注释掉的那一行代码, 如果不注释, 浏览器会不停地报错. 代码中的注释说这是一个用于错误收集的机制, 我看并不影响ext核心功能的使用, 所以就注释了. 我不太能理解ext为什么要一开始就注册一个定时器去定时执行一些代码, 有知道的童鞋能告诉我么?","slug":"miniExtjs","published":1,"updated":"2016-09-08T11:28:02.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisu97pof0001vkpv5u4snn80","content":"<p>ext 是我顶喜欢的一款js框架, 原因不仅仅只是因为它有着很专业的ui组件, 更要的是它有着很漂亮的类管理机制(尤其是ext4), 它为js程序员们定义了一整套编码规则, 使我们可以把js写得像java一样, ext 自身的代码就是用的这种编码规则,  所以大几万代码依然管理得井井有条. 如果你只是用js写些表单验证之类的小动作, 那么你肯定体会不到编码规则的重要性.  js这种语言, 如果是团队开发, 制作较为复杂的富客户端应用,  如果不强制统一编码风格, 维护起来那将会是场灾难.<br>   所以我有时自己写js玩的时候, 为了使自己的代码更漂亮, 也会用到ext. 当然, 是精简后的ext.<br>   构建一个最简易的ext其实非常简单. 我用的是当前最新的版本: ext-4.0.7-gpl.</p>\n<p>此文转自: <a href=\"http://www.makaidong.com\" target=\"_blank\" rel=\"external\">http://www.makaidong.com</a></p>\n<ol>\n<li><p>首先下载源码, 解压, 找到以下文件:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">/src/core/src/ext.js</div><div class=\"line\">      /src/core/src/lang/number.js</div><div class=\"line\">      /src/core/src/lang/string.js</div><div class=\"line\">      /src/core/src/lang/date.js </div><div class=\"line\"></div><div class=\"line\">      /src/core/src/lang/object.js</div><div class=\"line\">      /src/core/src/lang/array.js </div><div class=\"line\">      /src/core/src/lang/<span class=\"function\"><span class=\"keyword\">function</span>.<span class=\"title\">js</span> </span></div><div class=\"line\">      /<span class=\"title\">src</span>/<span class=\"title\">core</span>/<span class=\"title\">src</span>/<span class=\"title\">class</span>/<span class=\"title\">base</span>.<span class=\"title\">js</span> </div><div class=\"line\">      /<span class=\"title\">src</span>/<span class=\"title\">core</span>/<span class=\"title\">src</span>/<span class=\"title\">class</span>/<span class=\"title\">class</span>.<span class=\"title\">js</span>  </div><div class=\"line\">      /<span class=\"title\">src</span>/<span class=\"title\">core</span>/<span class=\"title\">src</span>/<span class=\"title\">class</span>/<span class=\"title\">classmanager</span>.<span class=\"title\">js</span> </div><div class=\"line\">      /<span class=\"title\">src</span>/<span class=\"title\">core</span>/<span class=\"title\">src</span>/<span class=\"title\">class</span>/<span class=\"title\">loader</span>.<span class=\"title\">js</span>  </div><div class=\"line\">      /<span class=\"title\">src</span>/<span class=\"title\">core</span>/<span class=\"title\">src</span>/<span class=\"title\">lang</span>/<span class=\"title\">error</span>.<span class=\"title\">js</span></div></pre></td></tr></table></figure>\n<ol>\n<li><p>把这些文件复制出来, 然后在一个页面中依次引用, 注意顺序不要乱, 然后用编辑器打开error.js , 在文件的最后部分注释掉一行代码:<br>……. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">poll</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        timer = win.setinterval(notify, <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// window.onerror sounds ideal but it prevents the built-in error dialog from doing</span></div><div class=\"line\">    <span class=\"comment\">// its (better) thing.</span></div><div class=\"line\">    <span class=\"comment\">//poll();   //把这一行注释掉</span></div><div class=\"line\">&#125;)();</div><div class=\"line\"><span class=\"comment\">//&lt;/debug&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>然后, 我们可以随便写一些代码了, 如果不报错, 那么就成功了:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">ext.define(<span class=\"string\">\"ext.foo\"</span>,&#123; </div><div class=\"line\">  name: <span class=\"literal\">null</span>,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>: function()&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"big-foo\"</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  say: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"my name is \"</span>+ <span class=\"keyword\">this</span>.name);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> ext.foo().say();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<p>这些文件其实也可以按顺序一起打包压缩, 加入到自己项目中, 我上面列出的那些文件压缩后只有50几kb…嘿嘿…袖珍版ext.  因为代码没有</p>\n<p>涉及到浏览器对象操作, 所以这个小框架甚至可以移植到 node.js 环境下使用, 只是由于ext这个对象会被自动加在顶层名称空间上, 所以在模块引用的时候会和node的习惯上有些不同, 当然这都是题外话了, 有兴趣的童鞋可以去玩玩, 有新发现记得告诉我.</p>\n<p>我之前说的没错吧, 操作很简单的. 不过这里面仅仅只启用了ext最核心最基础的一部分功能, 也就是类管理. 从这些 js文件的名字和在源码中得摆放目录的名子中就可以看出来, 放在 lang 目录下都是些对js 基础数据类型的扩展, class 目录下的都是类管理模块. 这么看来, 其实只要了解ext组件间的依赖关系(都可以在api中查到的), 按顺序加入相应的文件, 要随意地div 自己的ext 也不是一件难事.</p>\n<p>还有一点值得说明, 我注释掉的那一行代码, 如果不注释, 浏览器会不停地报错. 代码中的注释说这是一个用于错误收集的机制, 我看并不影响ext核心功能的使用, 所以就注释了. 我不太能理解ext为什么要一开始就注册一个定时器去定时执行一些代码, 有知道的童鞋能告诉我么?</p>\n","excerpt":"","more":"<p>ext 是我顶喜欢的一款js框架, 原因不仅仅只是因为它有着很专业的ui组件, 更要的是它有着很漂亮的类管理机制(尤其是ext4), 它为js程序员们定义了一整套编码规则, 使我们可以把js写得像java一样, ext 自身的代码就是用的这种编码规则,  所以大几万代码依然管理得井井有条. 如果你只是用js写些表单验证之类的小动作, 那么你肯定体会不到编码规则的重要性.  js这种语言, 如果是团队开发, 制作较为复杂的富客户端应用,  如果不强制统一编码风格, 维护起来那将会是场灾难.<br>   所以我有时自己写js玩的时候, 为了使自己的代码更漂亮, 也会用到ext. 当然, 是精简后的ext.<br>   构建一个最简易的ext其实非常简单. 我用的是当前最新的版本: ext-4.0.7-gpl.</p>\n<p>此文转自: <a href=\"http://www.makaidong.com\">http://www.makaidong.com</a></p>\n<ol>\n<li><p>首先下载源码, 解压, 找到以下文件:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">/src/core/src/ext.js</div><div class=\"line\">      /src/core/src/lang/number.js</div><div class=\"line\">      /src/core/src/lang/string.js</div><div class=\"line\">      /src/core/src/lang/date.js </div><div class=\"line\"></div><div class=\"line\">      /src/core/src/lang/object.js</div><div class=\"line\">      /src/core/src/lang/array.js </div><div class=\"line\">      /src/core/src/lang/<span class=\"function\"><span class=\"keyword\">function</span>.<span class=\"title\">js</span> </div><div class=\"line\">      /<span class=\"title\">src</span>/<span class=\"title\">core</span>/<span class=\"title\">src</span>/<span class=\"title\">class</span>/<span class=\"title\">base</span>.<span class=\"title\">js</span> </div><div class=\"line\">      /<span class=\"title\">src</span>/<span class=\"title\">core</span>/<span class=\"title\">src</span>/<span class=\"title\">class</span>/<span class=\"title\">class</span>.<span class=\"title\">js</span>  </div><div class=\"line\">      /<span class=\"title\">src</span>/<span class=\"title\">core</span>/<span class=\"title\">src</span>/<span class=\"title\">class</span>/<span class=\"title\">classmanager</span>.<span class=\"title\">js</span> </div><div class=\"line\">      /<span class=\"title\">src</span>/<span class=\"title\">core</span>/<span class=\"title\">src</span>/<span class=\"title\">class</span>/<span class=\"title\">loader</span>.<span class=\"title\">js</span>  </div><div class=\"line\">      /<span class=\"title\">src</span>/<span class=\"title\">core</span>/<span class=\"title\">src</span>/<span class=\"title\">lang</span>/<span class=\"title\">error</span>.<span class=\"title\">js</span></span></div></pre></td></tr></table></figure>\n<ol>\n<li><p>把这些文件复制出来, 然后在一个页面中依次引用, 注意顺序不要乱, 然后用编辑器打开error.js , 在文件的最后部分注释掉一行代码:<br>……. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">poll</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        timer = win.setinterval(notify, <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// window.onerror sounds ideal but it prevents the built-in error dialog from doing</span></div><div class=\"line\">    <span class=\"comment\">// its (better) thing.</span></div><div class=\"line\">    <span class=\"comment\">//poll();   //把这一行注释掉</span></div><div class=\"line\">&#125;)();</div><div class=\"line\"><span class=\"comment\">//&lt;/debug&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>然后, 我们可以随便写一些代码了, 如果不报错, 那么就成功了:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">ext.define(<span class=\"string\">\"ext.foo\"</span>,&#123; </div><div class=\"line\">  name: <span class=\"literal\">null</span>,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>: function()&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"big-foo\"</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  say: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"my name is \"</span>+ <span class=\"keyword\">this</span>.name);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> ext.foo().say();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<p>这些文件其实也可以按顺序一起打包压缩, 加入到自己项目中, 我上面列出的那些文件压缩后只有50几kb…嘿嘿…袖珍版ext.  因为代码没有</p>\n<p>涉及到浏览器对象操作, 所以这个小框架甚至可以移植到 node.js 环境下使用, 只是由于ext这个对象会被自动加在顶层名称空间上, 所以在模块引用的时候会和node的习惯上有些不同, 当然这都是题外话了, 有兴趣的童鞋可以去玩玩, 有新发现记得告诉我.</p>\n<p>我之前说的没错吧, 操作很简单的. 不过这里面仅仅只启用了ext最核心最基础的一部分功能, 也就是类管理. 从这些 js文件的名字和在源码中得摆放目录的名子中就可以看出来, 放在 lang 目录下都是些对js 基础数据类型的扩展, class 目录下的都是类管理模块. 这么看来, 其实只要了解ext组件间的依赖关系(都可以在api中查到的), 按顺序加入相应的文件, 要随意地div 自己的ext 也不是一件难事.</p>\n<p>还有一点值得说明, 我注释掉的那一行代码, 如果不注释, 浏览器会不停地报错. 代码中的注释说这是一个用于错误收集的机制, 我看并不影响ext核心功能的使用, 所以就注释了. 我不太能理解ext为什么要一开始就注册一个定时器去定时执行一些代码, 有知道的童鞋能告诉我么?</p>\n"},{"title":"自己实现的Promise","date":"2016-06-26T07:39:05.000Z","_content":"\nThePromise.js\n~~~javascript\nfunction ThePromise(fns) {\n    this.action(fns);\n}\nThePromise.prototype.action = function(fns) {\n    var _f = arguments.callee;\n    var fn = fns.shift();\n    fn && fn.call(fns, function(result, msg) {\n        console.log(msg);\n        result && _f(fns);\n    });\n};\n~~~\n\n调用方式\n~~~javascript\nfunction f1(f) {\n    $.get('data.json?type=1', {}, function(d) {\n        if(d.success) {\n            f(true, 'step1成功');\n        } else {\n            f(false, 'step1失败');\n        }\n    });\n}\nfunction f2(f) {\n    $.get('data.json?type=2', {}, function(d) {\n        if(d.success) {\n            f(true, 'step2成功');\n        } else {\n            f(false, 'step2失败');\n        }\n    });\n}\nfunction f3(f) {\n    $.get('data.json?type=3', {}, function(d) {\n        if(d.success) {\n            f(true, 'step3成功');\n        } else {\n            f(false, 'step3失败');\n        }\n    });\n}\n \nnew ThePromise([\n    f2,\n    f1,\n    f3,\n]);\n~~~\n\n","source":"_posts/myPromise.md","raw":"---\ntitle: 自己实现的Promise\ndate: 2016-06-26 15:39:05\ntags:\n---\n\nThePromise.js\n~~~javascript\nfunction ThePromise(fns) {\n    this.action(fns);\n}\nThePromise.prototype.action = function(fns) {\n    var _f = arguments.callee;\n    var fn = fns.shift();\n    fn && fn.call(fns, function(result, msg) {\n        console.log(msg);\n        result && _f(fns);\n    });\n};\n~~~\n\n调用方式\n~~~javascript\nfunction f1(f) {\n    $.get('data.json?type=1', {}, function(d) {\n        if(d.success) {\n            f(true, 'step1成功');\n        } else {\n            f(false, 'step1失败');\n        }\n    });\n}\nfunction f2(f) {\n    $.get('data.json?type=2', {}, function(d) {\n        if(d.success) {\n            f(true, 'step2成功');\n        } else {\n            f(false, 'step2失败');\n        }\n    });\n}\nfunction f3(f) {\n    $.get('data.json?type=3', {}, function(d) {\n        if(d.success) {\n            f(true, 'step3成功');\n        } else {\n            f(false, 'step3失败');\n        }\n    });\n}\n \nnew ThePromise([\n    f2,\n    f1,\n    f3,\n]);\n~~~\n\n","slug":"myPromise","published":1,"updated":"2016-09-08T11:28:22.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisu97poi0002vkpv4wm48oun","content":"<p>ThePromise.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ThePromise</span>(<span class=\"params\">fns</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.action(fns);</div><div class=\"line\">&#125;</div><div class=\"line\">ThePromise.prototype.action = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fns</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _f = <span class=\"built_in\">arguments</span>.callee;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = fns.shift();</div><div class=\"line\">    fn &amp;&amp; fn.call(fns, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, msg</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(msg);</div><div class=\"line\">        result &amp;&amp; _f(fns);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>调用方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">f</span>) </span>&#123;</div><div class=\"line\">    $.get(<span class=\"string\">'data.json?type=1'</span>, &#123;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(d.success) &#123;</div><div class=\"line\">            f(<span class=\"literal\">true</span>, <span class=\"string\">'step1成功'</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            f(<span class=\"literal\">false</span>, <span class=\"string\">'step1失败'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\">f</span>) </span>&#123;</div><div class=\"line\">    $.get(<span class=\"string\">'data.json?type=2'</span>, &#123;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(d.success) &#123;</div><div class=\"line\">            f(<span class=\"literal\">true</span>, <span class=\"string\">'step2成功'</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            f(<span class=\"literal\">false</span>, <span class=\"string\">'step2失败'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f3</span>(<span class=\"params\">f</span>) </span>&#123;</div><div class=\"line\">    $.get(<span class=\"string\">'data.json?type=3'</span>, &#123;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(d.success) &#123;</div><div class=\"line\">            f(<span class=\"literal\">true</span>, <span class=\"string\">'step3成功'</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            f(<span class=\"literal\">false</span>, <span class=\"string\">'step3失败'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">new</span> ThePromise([</div><div class=\"line\">    f2,</div><div class=\"line\">    f1,</div><div class=\"line\">    f3,</div><div class=\"line\">]);</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>ThePromise.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ThePromise</span>(<span class=\"params\">fns</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.action(fns);</div><div class=\"line\">&#125;</div><div class=\"line\">ThePromise.prototype.action = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fns</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _f = <span class=\"built_in\">arguments</span>.callee;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = fns.shift();</div><div class=\"line\">    fn &amp;&amp; fn.call(fns, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, msg</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(msg);</div><div class=\"line\">        result &amp;&amp; _f(fns);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>调用方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">f</span>) </span>&#123;</div><div class=\"line\">    $.get(<span class=\"string\">'data.json?type=1'</span>, &#123;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(d.success) &#123;</div><div class=\"line\">            f(<span class=\"literal\">true</span>, <span class=\"string\">'step1成功'</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            f(<span class=\"literal\">false</span>, <span class=\"string\">'step1失败'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\">f</span>) </span>&#123;</div><div class=\"line\">    $.get(<span class=\"string\">'data.json?type=2'</span>, &#123;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(d.success) &#123;</div><div class=\"line\">            f(<span class=\"literal\">true</span>, <span class=\"string\">'step2成功'</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            f(<span class=\"literal\">false</span>, <span class=\"string\">'step2失败'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f3</span>(<span class=\"params\">f</span>) </span>&#123;</div><div class=\"line\">    $.get(<span class=\"string\">'data.json?type=3'</span>, &#123;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(d.success) &#123;</div><div class=\"line\">            f(<span class=\"literal\">true</span>, <span class=\"string\">'step3成功'</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            f(<span class=\"literal\">false</span>, <span class=\"string\">'step3失败'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">new</span> ThePromise([</div><div class=\"line\">    f2,</div><div class=\"line\">    f1,</div><div class=\"line\">    f3,</div><div class=\"line\">]);</div></pre></td></tr></table></figure></p>\n"},{"title":"对js中观察者模式的一点理解","date":"2016-05-24T03:28:49.000Z","_content":"\n在观察者模式中, 当被观察者做出某动作时, 会通知关注它的观察者, 观察者收到通知后会做出相应的动作. 以歌星和粉丝为例, 歌星具有唱歌发布唱片的职能, 当歌星发布唱片时会通知关注他的粉丝们,粉丝们收到通知以后会做出相应的反应(购买唱片或是不买, 还上网收听, 由粉丝自己决定), 在这个过程中, 歌星只具有唱歌并通知他的粉丝的的职能, 而粉丝们则只能收到消息后做出自己的反应(购买或是不买, 自己决定), 这就是所谓的单一职责原则,由于明星和粉丝之间的联系只有通知,没有其他的关联, 大大降低了两者之间的耦合, 这就是解耦\n\n首先定义一个明星类, 并创建一个集合来存储关注他的粉丝\n~~~javascript\nvar Star = function() {                // 明星\n    this.fansList = [];            // 明星的粉丝 \n}\n~~~\n\n该明星具有唱歌的职能, 唱歌时需要通知关注他的粉丝们(会调用粉丝们的action方法)\n~~~javascript\nStar.prototype = {\n    constructor: Star,\n    song: function(song) {\n        this.notify(song);\n    },\n    notify:function(song) {    // 明星有活动时通知粉丝\n     \n        console.log('明星发布了唱片' + song);\n        this.fansList.forEach(function(fans, i) {\n            console.log('明星向粉丝发布发布唱片<<' + song + '>> 的消息');\n            fans.action.call(this, song);\n        });\n    }\n}\n~~~\n\n创建粉丝类\n~~~javascript\nvar Fans = function() {     // 粉丝\n \n}\n~~~\n\n粉丝具有关注哪个明星的功能(把自己加入所关注明生的粉丝列表中), 也有收到明星消息后作出反应的功能\n~~~javascript\nFans.prototype = {\n    constructor: Fans,\n    action:function(song) {        // 粉丝的行动\n        // do something\n         \n    },\n    follow: function(star) {  // 关注哪个明星\n        star.fansList.push(this);\n    }\n}\n~~~\n\n创建一个明星s\n~~~javascript\nvar s = new Star();\n~~~\n\n创建一个粉丝f1并关注明星s, 同时定义该粉丝收到消息后会做出什么样的动作\n~~~javascript\nvar f1 = new Fans();\nf1.follow(s);\nf1.action = function(song) { // 至于收到消息后做什么，由粉丝自己决定　\n    console.log('我是铁杆粉丝f1，我去购买唱片<<' + song + '>>');\n}\n~~~\n\n再创建一个粉丝f2\n~~~javascript\nvar f2 = new Fans();\nf2.follow(s);\nf2.action = function(song) {\n    console.log('我是铁杆粉丝f2，但买不起唱片，只能去借别人的唱片<<' + song + '>>');\n}\n~~~\n\n明星发布唱片(看来此明星是华仔)\n~~~javascript\ns.song('一起走过的日子');\n~~~\n\n而在js中最经典的应用就是对事件的处理, 包括浏览器原生事件和自定义事件\n\n以jq为便, 页面中有一个id为btn 的button, 通过jq为该按钮添加监听事件\n~~~javascript\n$('#btn').on('click', function(e) {\n    alert('我被点击了!')\n});\n~~~\n\n然后通过程序触发\n~~~javascript\n$('#btn').trigger('click');\n~~~\n\n可能有人会有疑问,  在这里, 到底谁是观察者, 谁是被观察者呢?\n\n因为在多数教程中, 观察者和被观察者往往是被设计的很分明的, 比如定义一个被观察者的类或对象, 具有发布消息的功能, 再定义一个观察者的类或对象, 具有接受被观察者通知并做出反应的功能, 在这里,两者的定义是非常明确的, 很好理解,但是在上面的这个jq的例子中, 到底谁是观察者, 谁又是被观察者呢?\n\n\n\n我们先来看下观察者, 观察者, 首先要有订阅的功能, 反映在这里就是监听click事件什么时候被触发, 那在这里, 谁在监听呢, jq中的on是添加监听的意思, 所以执行on方法的对象就是观察者, 即btn按钮.\n\n谁又是被观察者呢?　我们再来看下被观察者的功能，被观察者具有发布通知的功能，反映在这里就是触发click事件，而触发click事件的方法的执行者，又是$('#btn')!   所以，在这里，观察者和被观察者都是按钮本身，按钮扮演着观察者和被观察者两个角色，监听事件的时候，按钮是观察者，触发事件的时候，按钮是被观察者，这正是事件处理中观察者模式与其他地方不一样的地方．\n\n但是，为什么要这么做呢？为什么要让一个按钮扮演观察者和被观察者两个不同的角色呢? 因为, 我们最终关心的是谁被注册了什么事件, 以及事件被触发时做了什么动作, 而不关心监听和触发的对象是不是不同的, 所以, 在观察者和被观察者的设计上我们有了更灵活的空间, 我们可以设计将观察者和被观察者设计成不同的对象,也可以设计成一个对象, 很明显, 在这里我们没有必要将他们设计成两个不同的对象\n","source":"_posts/observable.md","raw":"---\ntitle: 对js中观察者模式的一点理解\ndate: 2016-05-24 11:28:49\ntags:\n---\n\n在观察者模式中, 当被观察者做出某动作时, 会通知关注它的观察者, 观察者收到通知后会做出相应的动作. 以歌星和粉丝为例, 歌星具有唱歌发布唱片的职能, 当歌星发布唱片时会通知关注他的粉丝们,粉丝们收到通知以后会做出相应的反应(购买唱片或是不买, 还上网收听, 由粉丝自己决定), 在这个过程中, 歌星只具有唱歌并通知他的粉丝的的职能, 而粉丝们则只能收到消息后做出自己的反应(购买或是不买, 自己决定), 这就是所谓的单一职责原则,由于明星和粉丝之间的联系只有通知,没有其他的关联, 大大降低了两者之间的耦合, 这就是解耦\n\n首先定义一个明星类, 并创建一个集合来存储关注他的粉丝\n~~~javascript\nvar Star = function() {                // 明星\n    this.fansList = [];            // 明星的粉丝 \n}\n~~~\n\n该明星具有唱歌的职能, 唱歌时需要通知关注他的粉丝们(会调用粉丝们的action方法)\n~~~javascript\nStar.prototype = {\n    constructor: Star,\n    song: function(song) {\n        this.notify(song);\n    },\n    notify:function(song) {    // 明星有活动时通知粉丝\n     \n        console.log('明星发布了唱片' + song);\n        this.fansList.forEach(function(fans, i) {\n            console.log('明星向粉丝发布发布唱片<<' + song + '>> 的消息');\n            fans.action.call(this, song);\n        });\n    }\n}\n~~~\n\n创建粉丝类\n~~~javascript\nvar Fans = function() {     // 粉丝\n \n}\n~~~\n\n粉丝具有关注哪个明星的功能(把自己加入所关注明生的粉丝列表中), 也有收到明星消息后作出反应的功能\n~~~javascript\nFans.prototype = {\n    constructor: Fans,\n    action:function(song) {        // 粉丝的行动\n        // do something\n         \n    },\n    follow: function(star) {  // 关注哪个明星\n        star.fansList.push(this);\n    }\n}\n~~~\n\n创建一个明星s\n~~~javascript\nvar s = new Star();\n~~~\n\n创建一个粉丝f1并关注明星s, 同时定义该粉丝收到消息后会做出什么样的动作\n~~~javascript\nvar f1 = new Fans();\nf1.follow(s);\nf1.action = function(song) { // 至于收到消息后做什么，由粉丝自己决定　\n    console.log('我是铁杆粉丝f1，我去购买唱片<<' + song + '>>');\n}\n~~~\n\n再创建一个粉丝f2\n~~~javascript\nvar f2 = new Fans();\nf2.follow(s);\nf2.action = function(song) {\n    console.log('我是铁杆粉丝f2，但买不起唱片，只能去借别人的唱片<<' + song + '>>');\n}\n~~~\n\n明星发布唱片(看来此明星是华仔)\n~~~javascript\ns.song('一起走过的日子');\n~~~\n\n而在js中最经典的应用就是对事件的处理, 包括浏览器原生事件和自定义事件\n\n以jq为便, 页面中有一个id为btn 的button, 通过jq为该按钮添加监听事件\n~~~javascript\n$('#btn').on('click', function(e) {\n    alert('我被点击了!')\n});\n~~~\n\n然后通过程序触发\n~~~javascript\n$('#btn').trigger('click');\n~~~\n\n可能有人会有疑问,  在这里, 到底谁是观察者, 谁是被观察者呢?\n\n因为在多数教程中, 观察者和被观察者往往是被设计的很分明的, 比如定义一个被观察者的类或对象, 具有发布消息的功能, 再定义一个观察者的类或对象, 具有接受被观察者通知并做出反应的功能, 在这里,两者的定义是非常明确的, 很好理解,但是在上面的这个jq的例子中, 到底谁是观察者, 谁又是被观察者呢?\n\n\n\n我们先来看下观察者, 观察者, 首先要有订阅的功能, 反映在这里就是监听click事件什么时候被触发, 那在这里, 谁在监听呢, jq中的on是添加监听的意思, 所以执行on方法的对象就是观察者, 即btn按钮.\n\n谁又是被观察者呢?　我们再来看下被观察者的功能，被观察者具有发布通知的功能，反映在这里就是触发click事件，而触发click事件的方法的执行者，又是$('#btn')!   所以，在这里，观察者和被观察者都是按钮本身，按钮扮演着观察者和被观察者两个角色，监听事件的时候，按钮是观察者，触发事件的时候，按钮是被观察者，这正是事件处理中观察者模式与其他地方不一样的地方．\n\n但是，为什么要这么做呢？为什么要让一个按钮扮演观察者和被观察者两个不同的角色呢? 因为, 我们最终关心的是谁被注册了什么事件, 以及事件被触发时做了什么动作, 而不关心监听和触发的对象是不是不同的, 所以, 在观察者和被观察者的设计上我们有了更灵活的空间, 我们可以设计将观察者和被观察者设计成不同的对象,也可以设计成一个对象, 很明显, 在这里我们没有必要将他们设计成两个不同的对象\n","slug":"observable","published":1,"updated":"2016-09-08T11:24:14.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisu97pol0003vkpvde84royl","content":"<p>在观察者模式中, 当被观察者做出某动作时, 会通知关注它的观察者, 观察者收到通知后会做出相应的动作. 以歌星和粉丝为例, 歌星具有唱歌发布唱片的职能, 当歌星发布唱片时会通知关注他的粉丝们,粉丝们收到通知以后会做出相应的反应(购买唱片或是不买, 还上网收听, 由粉丝自己决定), 在这个过程中, 歌星只具有唱歌并通知他的粉丝的的职能, 而粉丝们则只能收到消息后做出自己的反应(购买或是不买, 自己决定), 这就是所谓的单一职责原则,由于明星和粉丝之间的联系只有通知,没有其他的关联, 大大降低了两者之间的耦合, 这就是解耦</p>\n<p>首先定义一个明星类, 并创建一个集合来存储关注他的粉丝<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Star = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;                <span class=\"comment\">// 明星</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.fansList = [];            <span class=\"comment\">// 明星的粉丝 </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>该明星具有唱歌的职能, 唱歌时需要通知关注他的粉丝们(会调用粉丝们的action方法)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Star.prototype = &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>: Star,</div><div class=\"line\">    song: function(song) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.notify(song);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    notify:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">song</span>) </span>&#123;    <span class=\"comment\">// 明星有活动时通知粉丝</span></div><div class=\"line\">     </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'明星发布了唱片'</span> + song);</div><div class=\"line\">        <span class=\"keyword\">this</span>.fansList.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fans, i</span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'明星向粉丝发布发布唱片&lt;&lt;'</span> + song + <span class=\"string\">'&gt;&gt; 的消息'</span>);</div><div class=\"line\">            fans.action.call(<span class=\"keyword\">this</span>, song);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>创建粉丝类<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Fans = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;     <span class=\"comment\">// 粉丝</span></div><div class=\"line\"> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>粉丝具有关注哪个明星的功能(把自己加入所关注明生的粉丝列表中), 也有收到明星消息后作出反应的功能<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Fans.prototype = &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>: Fans,</div><div class=\"line\">    action:function(song) &#123;        <span class=\"comment\">// 粉丝的行动</span></div><div class=\"line\">        <span class=\"comment\">// do something</span></div><div class=\"line\">         </div><div class=\"line\">    &#125;,</div><div class=\"line\">    follow: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">star</span>) </span>&#123;  <span class=\"comment\">// 关注哪个明星</span></div><div class=\"line\">        star.fansList.push(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>创建一个明星s<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Star();</div></pre></td></tr></table></figure></p>\n<p>创建一个粉丝f1并关注明星s, 同时定义该粉丝收到消息后会做出什么样的动作<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"keyword\">new</span> Fans();</div><div class=\"line\">f1.follow(s);</div><div class=\"line\">f1.action = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">song</span>) </span>&#123; <span class=\"comment\">// 至于收到消息后做什么，由粉丝自己决定　</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是铁杆粉丝f1，我去购买唱片&lt;&lt;'</span> + song + <span class=\"string\">'&gt;&gt;'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>再创建一个粉丝f2<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f2 = <span class=\"keyword\">new</span> Fans();</div><div class=\"line\">f2.follow(s);</div><div class=\"line\">f2.action = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">song</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是铁杆粉丝f2，但买不起唱片，只能去借别人的唱片&lt;&lt;'</span> + song + <span class=\"string\">'&gt;&gt;'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>明星发布唱片(看来此明星是华仔)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">s.song(<span class=\"string\">'一起走过的日子'</span>);</div></pre></td></tr></table></figure></p>\n<p>而在js中最经典的应用就是对事件的处理, 包括浏览器原生事件和自定义事件</p>\n<p>以jq为便, 页面中有一个id为btn 的button, 通过jq为该按钮添加监听事件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#btn'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'我被点击了!'</span>)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>然后通过程序触发<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'click'</span>);</div></pre></td></tr></table></figure></p>\n<p>可能有人会有疑问,  在这里, 到底谁是观察者, 谁是被观察者呢?</p>\n<p>因为在多数教程中, 观察者和被观察者往往是被设计的很分明的, 比如定义一个被观察者的类或对象, 具有发布消息的功能, 再定义一个观察者的类或对象, 具有接受被观察者通知并做出反应的功能, 在这里,两者的定义是非常明确的, 很好理解,但是在上面的这个jq的例子中, 到底谁是观察者, 谁又是被观察者呢?</p>\n<p>我们先来看下观察者, 观察者, 首先要有订阅的功能, 反映在这里就是监听click事件什么时候被触发, 那在这里, 谁在监听呢, jq中的on是添加监听的意思, 所以执行on方法的对象就是观察者, 即btn按钮.</p>\n<p>谁又是被观察者呢?　我们再来看下被观察者的功能，被观察者具有发布通知的功能，反映在这里就是触发click事件，而触发click事件的方法的执行者，又是$(‘#btn’)!   所以，在这里，观察者和被观察者都是按钮本身，按钮扮演着观察者和被观察者两个角色，监听事件的时候，按钮是观察者，触发事件的时候，按钮是被观察者，这正是事件处理中观察者模式与其他地方不一样的地方．</p>\n<p>但是，为什么要这么做呢？为什么要让一个按钮扮演观察者和被观察者两个不同的角色呢? 因为, 我们最终关心的是谁被注册了什么事件, 以及事件被触发时做了什么动作, 而不关心监听和触发的对象是不是不同的, 所以, 在观察者和被观察者的设计上我们有了更灵活的空间, 我们可以设计将观察者和被观察者设计成不同的对象,也可以设计成一个对象, 很明显, 在这里我们没有必要将他们设计成两个不同的对象</p>\n","excerpt":"","more":"<p>在观察者模式中, 当被观察者做出某动作时, 会通知关注它的观察者, 观察者收到通知后会做出相应的动作. 以歌星和粉丝为例, 歌星具有唱歌发布唱片的职能, 当歌星发布唱片时会通知关注他的粉丝们,粉丝们收到通知以后会做出相应的反应(购买唱片或是不买, 还上网收听, 由粉丝自己决定), 在这个过程中, 歌星只具有唱歌并通知他的粉丝的的职能, 而粉丝们则只能收到消息后做出自己的反应(购买或是不买, 自己决定), 这就是所谓的单一职责原则,由于明星和粉丝之间的联系只有通知,没有其他的关联, 大大降低了两者之间的耦合, 这就是解耦</p>\n<p>首先定义一个明星类, 并创建一个集合来存储关注他的粉丝<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Star = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;                <span class=\"comment\">// 明星</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.fansList = [];            <span class=\"comment\">// 明星的粉丝 </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>该明星具有唱歌的职能, 唱歌时需要通知关注他的粉丝们(会调用粉丝们的action方法)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Star.prototype = &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>: Star,</div><div class=\"line\">    song: function(song) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.notify(song);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    notify:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">song</span>) </span>&#123;    <span class=\"comment\">// 明星有活动时通知粉丝</span></div><div class=\"line\">     </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'明星发布了唱片'</span> + song);</div><div class=\"line\">        <span class=\"keyword\">this</span>.fansList.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fans, i</span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'明星向粉丝发布发布唱片&lt;&lt;'</span> + song + <span class=\"string\">'&gt;&gt; 的消息'</span>);</div><div class=\"line\">            fans.action.call(<span class=\"keyword\">this</span>, song);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>创建粉丝类<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Fans = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;     <span class=\"comment\">// 粉丝</span></div><div class=\"line\"> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>粉丝具有关注哪个明星的功能(把自己加入所关注明生的粉丝列表中), 也有收到明星消息后作出反应的功能<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Fans.prototype = &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>: Fans,</div><div class=\"line\">    action:function(song) &#123;        <span class=\"comment\">// 粉丝的行动</span></div><div class=\"line\">        <span class=\"comment\">// do something</span></div><div class=\"line\">         </div><div class=\"line\">    &#125;,</div><div class=\"line\">    follow: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">star</span>) </span>&#123;  <span class=\"comment\">// 关注哪个明星</span></div><div class=\"line\">        star.fansList.push(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>创建一个明星s<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Star();</div></pre></td></tr></table></figure></p>\n<p>创建一个粉丝f1并关注明星s, 同时定义该粉丝收到消息后会做出什么样的动作<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"keyword\">new</span> Fans();</div><div class=\"line\">f1.follow(s);</div><div class=\"line\">f1.action = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">song</span>) </span>&#123; <span class=\"comment\">// 至于收到消息后做什么，由粉丝自己决定　</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是铁杆粉丝f1，我去购买唱片&lt;&lt;'</span> + song + <span class=\"string\">'&gt;&gt;'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>再创建一个粉丝f2<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f2 = <span class=\"keyword\">new</span> Fans();</div><div class=\"line\">f2.follow(s);</div><div class=\"line\">f2.action = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">song</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是铁杆粉丝f2，但买不起唱片，只能去借别人的唱片&lt;&lt;'</span> + song + <span class=\"string\">'&gt;&gt;'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>明星发布唱片(看来此明星是华仔)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">s.song(<span class=\"string\">'一起走过的日子'</span>);</div></pre></td></tr></table></figure></p>\n<p>而在js中最经典的应用就是对事件的处理, 包括浏览器原生事件和自定义事件</p>\n<p>以jq为便, 页面中有一个id为btn 的button, 通过jq为该按钮添加监听事件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#btn'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'我被点击了!'</span>)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>然后通过程序触发<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'click'</span>);</div></pre></td></tr></table></figure></p>\n<p>可能有人会有疑问,  在这里, 到底谁是观察者, 谁是被观察者呢?</p>\n<p>因为在多数教程中, 观察者和被观察者往往是被设计的很分明的, 比如定义一个被观察者的类或对象, 具有发布消息的功能, 再定义一个观察者的类或对象, 具有接受被观察者通知并做出反应的功能, 在这里,两者的定义是非常明确的, 很好理解,但是在上面的这个jq的例子中, 到底谁是观察者, 谁又是被观察者呢?</p>\n<p>我们先来看下观察者, 观察者, 首先要有订阅的功能, 反映在这里就是监听click事件什么时候被触发, 那在这里, 谁在监听呢, jq中的on是添加监听的意思, 所以执行on方法的对象就是观察者, 即btn按钮.</p>\n<p>谁又是被观察者呢?　我们再来看下被观察者的功能，被观察者具有发布通知的功能，反映在这里就是触发click事件，而触发click事件的方法的执行者，又是$(‘#btn’)!   所以，在这里，观察者和被观察者都是按钮本身，按钮扮演着观察者和被观察者两个角色，监听事件的时候，按钮是观察者，触发事件的时候，按钮是被观察者，这正是事件处理中观察者模式与其他地方不一样的地方．</p>\n<p>但是，为什么要这么做呢？为什么要让一个按钮扮演观察者和被观察者两个不同的角色呢? 因为, 我们最终关心的是谁被注册了什么事件, 以及事件被触发时做了什么动作, 而不关心监听和触发的对象是不是不同的, 所以, 在观察者和被观察者的设计上我们有了更灵活的空间, 我们可以设计将观察者和被观察者设计成不同的对象,也可以设计成一个对象, 很明显, 在这里我们没有必要将他们设计成两个不同的对象</p>\n"},{"title":"对js闭包的一点认识","date":"2016-05-02T14:57:03.000Z","_content":"\n先看一段代码\n~~~javascript\nvar a = [];\nvar i = 0;\nfor(; i < 2; i ++) {\n    a[i] = function() {\n        console.log(i);\n    }\n}\n \na.forEach(function(fn, i) {\n    fn();\n})\n \n结果：\n2\n2\n\n~~~\n可能很多人对这段代码无法理解，程序的设计者设计的初衷是想给数组a放置打印下标的function, 可实际执行结果是，数组a里存放的function打印的不是对应的下标，而全都是２！？！？　无法理解？　不要急，等我一步一步的调试下，可能会对你有所帮助呢\n\n１，下面这段代码相信都没有疑问\t\n~~~javascript\nvar i = 0;\nvar test = function() {\n    console.log(i);\n}\ntest();\n \n结果：\n0\n~~~\n\n２，这一步\n~~~javascript\nvar i = 0;\nvar test = function() {        // 声明的时候，　此时i=0,但是调用的时候，i已经变成了1\n    console.log(i);       \n}\ni++;\ntest();\n \n结果：\n1\n~~~\n\ntest声明的时候，　此时i=0,但是调用的时候，i已经变成了1\n\n3,\n~~~javascript\nvar i = 0;\n \nvar test = function() {\n    console.log(i);\n}\ni++;\n \nvar test2 = function() {\n    console.log(i);\n}\ni++;\n \ntest();\ntest2();\n \n结果：\n2\n2\n~~~\n\n再加一个函数test2, 同时再次i++, 函数内容同样是打印i, 结果是两次打印都是2, 因为这两个函数中的i是同一个值,并且打印时i的值不是声明时的值,而是和调用时的值保持一致, \n\n\n\n4,\n~~~javascript\nvar a = [];\nvar i = 0;\na.push(function() {\n    console.log(i);\n});\ni++;\na.push(function() {\n    console.log(i);\n});\ni++;\na[0]();\na[1]();\n \n结果:\n2\n2\n~~~\n\n一样的, 只是把函数存进了数组\n\n\n\n5, 然后还是一样的, 只是放进了循环中,但现在, 已经无缝过渡到了开头的那一段\n~~~javascript\nvar a = [];\nvar i = 0;\nfor(; i < 2; i ++) {\n    a[i] = function() {\n        console.log(i);\n    }\n}\n \na.forEach(function(fn, i) {\n    fn();\n})\n \n结果：\n2\n2\n~~~\n\n6, 怎么让程序按我们期望的方式输出呢？　一个解决办法是, 将函数嵌套在一个匿名函数里,通过匿名函数来传i值\n~~~javascript\nvar a = [];\nvar i = 0;\nfor(; i < 2; i ++) {\n    a[i] = (function(v) {\n        return function() {\n            console.log(v);\n        }\n    })(i);\n}\n \na.forEach(function(fn, i) {\n    fn();\n})\n \n结果：\n0\n1\n~~~\n\n\n原因是，通过匿名函数传值后，匿名函数里的v是局部变量，是函数中非公用的活动对象，不会受外面i的影响，因此能够将我们期望的下标值打印出来\n\n\n\n\n\n结论:  其实这就是一个闭包引起的副作用(该闭包没有外部函数,因为外部函数不是必需的(是不是可以暂称此类闭包为开包openure)),  当前函数的活动对象的活动对象其实就是全局变量对象, 因为没有外部函数, 这个数组里的所有函数共用一个活动对象, 包括a和i, 所有这里的函数共用一个i, 所以每个函数里的i值都是最后一个值2\n\n\n\n欢迎指教和探讨！\n","source":"_posts/something4Closure.md","raw":"---\ntitle: 对js闭包的一点认识\ndate: 2016-05-02 22:57:03\ntags:\n---\n\n先看一段代码\n~~~javascript\nvar a = [];\nvar i = 0;\nfor(; i < 2; i ++) {\n    a[i] = function() {\n        console.log(i);\n    }\n}\n \na.forEach(function(fn, i) {\n    fn();\n})\n \n结果：\n2\n2\n\n~~~\n可能很多人对这段代码无法理解，程序的设计者设计的初衷是想给数组a放置打印下标的function, 可实际执行结果是，数组a里存放的function打印的不是对应的下标，而全都是２！？！？　无法理解？　不要急，等我一步一步的调试下，可能会对你有所帮助呢\n\n１，下面这段代码相信都没有疑问\t\n~~~javascript\nvar i = 0;\nvar test = function() {\n    console.log(i);\n}\ntest();\n \n结果：\n0\n~~~\n\n２，这一步\n~~~javascript\nvar i = 0;\nvar test = function() {        // 声明的时候，　此时i=0,但是调用的时候，i已经变成了1\n    console.log(i);       \n}\ni++;\ntest();\n \n结果：\n1\n~~~\n\ntest声明的时候，　此时i=0,但是调用的时候，i已经变成了1\n\n3,\n~~~javascript\nvar i = 0;\n \nvar test = function() {\n    console.log(i);\n}\ni++;\n \nvar test2 = function() {\n    console.log(i);\n}\ni++;\n \ntest();\ntest2();\n \n结果：\n2\n2\n~~~\n\n再加一个函数test2, 同时再次i++, 函数内容同样是打印i, 结果是两次打印都是2, 因为这两个函数中的i是同一个值,并且打印时i的值不是声明时的值,而是和调用时的值保持一致, \n\n\n\n4,\n~~~javascript\nvar a = [];\nvar i = 0;\na.push(function() {\n    console.log(i);\n});\ni++;\na.push(function() {\n    console.log(i);\n});\ni++;\na[0]();\na[1]();\n \n结果:\n2\n2\n~~~\n\n一样的, 只是把函数存进了数组\n\n\n\n5, 然后还是一样的, 只是放进了循环中,但现在, 已经无缝过渡到了开头的那一段\n~~~javascript\nvar a = [];\nvar i = 0;\nfor(; i < 2; i ++) {\n    a[i] = function() {\n        console.log(i);\n    }\n}\n \na.forEach(function(fn, i) {\n    fn();\n})\n \n结果：\n2\n2\n~~~\n\n6, 怎么让程序按我们期望的方式输出呢？　一个解决办法是, 将函数嵌套在一个匿名函数里,通过匿名函数来传i值\n~~~javascript\nvar a = [];\nvar i = 0;\nfor(; i < 2; i ++) {\n    a[i] = (function(v) {\n        return function() {\n            console.log(v);\n        }\n    })(i);\n}\n \na.forEach(function(fn, i) {\n    fn();\n})\n \n结果：\n0\n1\n~~~\n\n\n原因是，通过匿名函数传值后，匿名函数里的v是局部变量，是函数中非公用的活动对象，不会受外面i的影响，因此能够将我们期望的下标值打印出来\n\n\n\n\n\n结论:  其实这就是一个闭包引起的副作用(该闭包没有外部函数,因为外部函数不是必需的(是不是可以暂称此类闭包为开包openure)),  当前函数的活动对象的活动对象其实就是全局变量对象, 因为没有外部函数, 这个数组里的所有函数共用一个活动对象, 包括a和i, 所有这里的函数共用一个i, 所以每个函数里的i值都是最后一个值2\n\n\n\n欢迎指教和探讨！\n","slug":"something4Closure","published":1,"updated":"2016-09-08T11:23:36.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisu97pom0004vkpvsr4rvqt7","content":"<p>先看一段代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>(; i &lt; <span class=\"number\">2</span>; i ++) &#123;</div><div class=\"line\">    a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, i</span>) </span>&#123;</div><div class=\"line\">    fn();</div><div class=\"line\">&#125;)</div><div class=\"line\"> </div><div class=\"line\">结果：</div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<p>可能很多人对这段代码无法理解，程序的设计者设计的初衷是想给数组a放置打印下标的function, 可实际执行结果是，数组a里存放的function打印的不是对应的下标，而全都是２！？！？　无法理解？　不要急，等我一步一步的调试下，可能会对你有所帮助呢</p>\n<p>１，下面这段代码相信都没有疑问<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">&#125;</div><div class=\"line\">test();</div><div class=\"line\"> </div><div class=\"line\">结果：</div><div class=\"line\"><span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<p>２，这一步<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;        <span class=\"comment\">// 声明的时候，　此时i=0,但是调用的时候，i已经变成了1</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);       </div><div class=\"line\">&#125;</div><div class=\"line\">i++;</div><div class=\"line\">test();</div><div class=\"line\"> </div><div class=\"line\">结果：</div><div class=\"line\"><span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>test声明的时候，　此时i=0,但是调用的时候，i已经变成了1</p>\n<p>3,<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">&#125;</div><div class=\"line\">i++;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> test2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">&#125;</div><div class=\"line\">i++;</div><div class=\"line\"> </div><div class=\"line\">test();</div><div class=\"line\">test2();</div><div class=\"line\"> </div><div class=\"line\">结果：</div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<p>再加一个函数test2, 同时再次i++, 函数内容同样是打印i, 结果是两次打印都是2, 因为这两个函数中的i是同一个值,并且打印时i的值不是声明时的值,而是和调用时的值保持一致, </p>\n<p>4,<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">a.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">&#125;);</div><div class=\"line\">i++;</div><div class=\"line\">a.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">&#125;);</div><div class=\"line\">i++;</div><div class=\"line\">a[<span class=\"number\">0</span>]();</div><div class=\"line\">a[<span class=\"number\">1</span>]();</div><div class=\"line\"> </div><div class=\"line\">结果:</div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<p>一样的, 只是把函数存进了数组</p>\n<p>5, 然后还是一样的, 只是放进了循环中,但现在, 已经无缝过渡到了开头的那一段<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>(; i &lt; <span class=\"number\">2</span>; i ++) &#123;</div><div class=\"line\">    a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, i</span>) </span>&#123;</div><div class=\"line\">    fn();</div><div class=\"line\">&#125;)</div><div class=\"line\"> </div><div class=\"line\">结果：</div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<p>6, 怎么让程序按我们期望的方式输出呢？　一个解决办法是, 将函数嵌套在一个匿名函数里,通过匿名函数来传i值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>(; i &lt; <span class=\"number\">2</span>; i ++) &#123;</div><div class=\"line\">    a[i] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(v);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(i);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, i</span>) </span>&#123;</div><div class=\"line\">    fn();</div><div class=\"line\">&#125;)</div><div class=\"line\"> </div><div class=\"line\">结果：</div><div class=\"line\"><span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>原因是，通过匿名函数传值后，匿名函数里的v是局部变量，是函数中非公用的活动对象，不会受外面i的影响，因此能够将我们期望的下标值打印出来</p>\n<p>结论:  其实这就是一个闭包引起的副作用(该闭包没有外部函数,因为外部函数不是必需的(是不是可以暂称此类闭包为开包openure)),  当前函数的活动对象的活动对象其实就是全局变量对象, 因为没有外部函数, 这个数组里的所有函数共用一个活动对象, 包括a和i, 所有这里的函数共用一个i, 所以每个函数里的i值都是最后一个值2</p>\n<p>欢迎指教和探讨！</p>\n","excerpt":"","more":"<p>先看一段代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>(; i &lt; <span class=\"number\">2</span>; i ++) &#123;</div><div class=\"line\">    a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, i</span>) </span>&#123;</div><div class=\"line\">    fn();</div><div class=\"line\">&#125;)</div><div class=\"line\"> </div><div class=\"line\">结果：</div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<p>可能很多人对这段代码无法理解，程序的设计者设计的初衷是想给数组a放置打印下标的function, 可实际执行结果是，数组a里存放的function打印的不是对应的下标，而全都是２！？！？　无法理解？　不要急，等我一步一步的调试下，可能会对你有所帮助呢</p>\n<p>１，下面这段代码相信都没有疑问<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">&#125;</div><div class=\"line\">test();</div><div class=\"line\"> </div><div class=\"line\">结果：</div><div class=\"line\"><span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<p>２，这一步<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;        <span class=\"comment\">// 声明的时候，　此时i=0,但是调用的时候，i已经变成了1</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);       </div><div class=\"line\">&#125;</div><div class=\"line\">i++;</div><div class=\"line\">test();</div><div class=\"line\"> </div><div class=\"line\">结果：</div><div class=\"line\"><span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>test声明的时候，　此时i=0,但是调用的时候，i已经变成了1</p>\n<p>3,<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">&#125;</div><div class=\"line\">i++;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> test2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">&#125;</div><div class=\"line\">i++;</div><div class=\"line\"> </div><div class=\"line\">test();</div><div class=\"line\">test2();</div><div class=\"line\"> </div><div class=\"line\">结果：</div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<p>再加一个函数test2, 同时再次i++, 函数内容同样是打印i, 结果是两次打印都是2, 因为这两个函数中的i是同一个值,并且打印时i的值不是声明时的值,而是和调用时的值保持一致, </p>\n<p>4,<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">a.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">&#125;);</div><div class=\"line\">i++;</div><div class=\"line\">a.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">&#125;);</div><div class=\"line\">i++;</div><div class=\"line\">a[<span class=\"number\">0</span>]();</div><div class=\"line\">a[<span class=\"number\">1</span>]();</div><div class=\"line\"> </div><div class=\"line\">结果:</div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<p>一样的, 只是把函数存进了数组</p>\n<p>5, 然后还是一样的, 只是放进了循环中,但现在, 已经无缝过渡到了开头的那一段<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>(; i &lt; <span class=\"number\">2</span>; i ++) &#123;</div><div class=\"line\">    a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, i</span>) </span>&#123;</div><div class=\"line\">    fn();</div><div class=\"line\">&#125;)</div><div class=\"line\"> </div><div class=\"line\">结果：</div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<p>6, 怎么让程序按我们期望的方式输出呢？　一个解决办法是, 将函数嵌套在一个匿名函数里,通过匿名函数来传i值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>(; i &lt; <span class=\"number\">2</span>; i ++) &#123;</div><div class=\"line\">    a[i] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(v);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(i);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, i</span>) </span>&#123;</div><div class=\"line\">    fn();</div><div class=\"line\">&#125;)</div><div class=\"line\"> </div><div class=\"line\">结果：</div><div class=\"line\"><span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>原因是，通过匿名函数传值后，匿名函数里的v是局部变量，是函数中非公用的活动对象，不会受外面i的影响，因此能够将我们期望的下标值打印出来</p>\n<p>结论:  其实这就是一个闭包引起的副作用(该闭包没有外部函数,因为外部函数不是必需的(是不是可以暂称此类闭包为开包openure)),  当前函数的活动对象的活动对象其实就是全局变量对象, 因为没有外部函数, 这个数组里的所有函数共用一个活动对象, 包括a和i, 所有这里的函数共用一个i, 所以每个函数里的i值都是最后一个值2</p>\n<p>欢迎指教和探讨！</p>\n"},{"title":"Zabbix架构的改进方案(一)","date":"2016-03-03T13:02:24.000Z","_content":"最近要使用Zabbix做二次开发, 实在无力吐槽..  \n\n1, 界面丑陋(3版本的还好些), 二版本的简直就是上个世纪的界面, 看着就没有做的心情. \n\n2, 用户体验差,选择个下列框界面都要刷一次, 几乎所有的操作都是用提交本页刷新来完成. \n\n3, ui框架是用php后台做的, 面向对象的类继承结构,这个思想倒是不错, 让我想起了java的zk框架,但是做的远没有zk完善, 特别是对事件的处理上, 绝大多数还是要依赖嵌入的js文件来对dom操作. 组件的功能绝大多只是对对html元素做了个封装,实用的功能很少. 基本上也是鸡肋. 这也造成了前端后台耦合非常的深, 非常不利于前后端分离开发.\n\n4,后台控制器实现繁琐. 系统中的后台请求分两种模式, 一种是在单个php文件中根据参数的不同用if来判断走不同的分枝,非常的乱,再加上php的调试模式, 调试起来非常的麻烦. 另一种是写一个类文件继承CController, 一个请求要对应一个php文件,还要在CRouter中配置, 也比较繁琐\n\n\n\n针对以上情况,我们采取的方式是,原有功能仍保持zabbix原来的模式,新增加的功能则使用前后台分离的模式,要采用我们自己的前端js框架,前端只负责前端界面展示及操作,后台只负责后台操作,然后返回给前端json数据,两者之间只有数据的交互. 为了使用这种模式,除了引入前端的框架,还要对后台的mvc架构进行改进, 原先的后台模式分两种,一种是非mvc模式,直接在php文件中根据传来的参数简单的判断,非常的乱. 另一种是mvc模式,缺点一个请求要对应一个控制器文件,还要在手配置文件中手动的配置一下,开发比较繁琐. 针对以上两种模式的缺点, 在第二种mvc模式基础之上改进了一个新的mvc模式,即一个模块只要建一个前端js文件和后台的一个继承了BaseController的控制器即可,该模块里所有的操作都是做为该控制器的成员方法存在的,类似java的struts2.\n\n\n新模式中,一个模块就是一个页面,包括头,尾和中间内容部分,头和尾都是固定的, 中间界面部分需要建一个对应的js来渲染界面,该js继承要自TSWidget. 访问时通过 模块名.do来访问．该模块中还会有很多其他请求,比如新增, 删除等,这些请示对应的后台是继承自BaseController的一个文件名为 模块名 + Controller.php的文件, 该模块中有对应操作的各方法, 在各方法中操作数据库, 并将结果赋值给$this->data即可，访问时通过 模块名!方法名.do来访问,返回一个由Controller中方法中$this->data转成的json字符, 返回到前台处理．\n\n\n\n\n\n下节再见","source":"_posts/zabbx1.md","raw":"---\ntitle: Zabbix架构的改进方案(一)\ndate: 2016-03-03 21:02:24\ntags:\n---\n最近要使用Zabbix做二次开发, 实在无力吐槽..  \n\n1, 界面丑陋(3版本的还好些), 二版本的简直就是上个世纪的界面, 看着就没有做的心情. \n\n2, 用户体验差,选择个下列框界面都要刷一次, 几乎所有的操作都是用提交本页刷新来完成. \n\n3, ui框架是用php后台做的, 面向对象的类继承结构,这个思想倒是不错, 让我想起了java的zk框架,但是做的远没有zk完善, 特别是对事件的处理上, 绝大多数还是要依赖嵌入的js文件来对dom操作. 组件的功能绝大多只是对对html元素做了个封装,实用的功能很少. 基本上也是鸡肋. 这也造成了前端后台耦合非常的深, 非常不利于前后端分离开发.\n\n4,后台控制器实现繁琐. 系统中的后台请求分两种模式, 一种是在单个php文件中根据参数的不同用if来判断走不同的分枝,非常的乱,再加上php的调试模式, 调试起来非常的麻烦. 另一种是写一个类文件继承CController, 一个请求要对应一个php文件,还要在CRouter中配置, 也比较繁琐\n\n\n\n针对以上情况,我们采取的方式是,原有功能仍保持zabbix原来的模式,新增加的功能则使用前后台分离的模式,要采用我们自己的前端js框架,前端只负责前端界面展示及操作,后台只负责后台操作,然后返回给前端json数据,两者之间只有数据的交互. 为了使用这种模式,除了引入前端的框架,还要对后台的mvc架构进行改进, 原先的后台模式分两种,一种是非mvc模式,直接在php文件中根据传来的参数简单的判断,非常的乱. 另一种是mvc模式,缺点一个请求要对应一个控制器文件,还要在手配置文件中手动的配置一下,开发比较繁琐. 针对以上两种模式的缺点, 在第二种mvc模式基础之上改进了一个新的mvc模式,即一个模块只要建一个前端js文件和后台的一个继承了BaseController的控制器即可,该模块里所有的操作都是做为该控制器的成员方法存在的,类似java的struts2.\n\n\n新模式中,一个模块就是一个页面,包括头,尾和中间内容部分,头和尾都是固定的, 中间界面部分需要建一个对应的js来渲染界面,该js继承要自TSWidget. 访问时通过 模块名.do来访问．该模块中还会有很多其他请求,比如新增, 删除等,这些请示对应的后台是继承自BaseController的一个文件名为 模块名 + Controller.php的文件, 该模块中有对应操作的各方法, 在各方法中操作数据库, 并将结果赋值给$this->data即可，访问时通过 模块名!方法名.do来访问,返回一个由Controller中方法中$this->data转成的json字符, 返回到前台处理．\n\n\n\n\n\n下节再见","slug":"zabbx1","published":1,"updated":"2016-09-08T11:21:16.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisu97poo0005vkpvw9np3rp9","content":"<p>最近要使用Zabbix做二次开发, 实在无力吐槽..  </p>\n<p>1, 界面丑陋(3版本的还好些), 二版本的简直就是上个世纪的界面, 看着就没有做的心情. </p>\n<p>2, 用户体验差,选择个下列框界面都要刷一次, 几乎所有的操作都是用提交本页刷新来完成. </p>\n<p>3, ui框架是用php后台做的, 面向对象的类继承结构,这个思想倒是不错, 让我想起了java的zk框架,但是做的远没有zk完善, 特别是对事件的处理上, 绝大多数还是要依赖嵌入的js文件来对dom操作. 组件的功能绝大多只是对对html元素做了个封装,实用的功能很少. 基本上也是鸡肋. 这也造成了前端后台耦合非常的深, 非常不利于前后端分离开发.</p>\n<p>4,后台控制器实现繁琐. 系统中的后台请求分两种模式, 一种是在单个php文件中根据参数的不同用if来判断走不同的分枝,非常的乱,再加上php的调试模式, 调试起来非常的麻烦. 另一种是写一个类文件继承CController, 一个请求要对应一个php文件,还要在CRouter中配置, 也比较繁琐</p>\n<p>针对以上情况,我们采取的方式是,原有功能仍保持zabbix原来的模式,新增加的功能则使用前后台分离的模式,要采用我们自己的前端js框架,前端只负责前端界面展示及操作,后台只负责后台操作,然后返回给前端json数据,两者之间只有数据的交互. 为了使用这种模式,除了引入前端的框架,还要对后台的mvc架构进行改进, 原先的后台模式分两种,一种是非mvc模式,直接在php文件中根据传来的参数简单的判断,非常的乱. 另一种是mvc模式,缺点一个请求要对应一个控制器文件,还要在手配置文件中手动的配置一下,开发比较繁琐. 针对以上两种模式的缺点, 在第二种mvc模式基础之上改进了一个新的mvc模式,即一个模块只要建一个前端js文件和后台的一个继承了BaseController的控制器即可,该模块里所有的操作都是做为该控制器的成员方法存在的,类似java的struts2.</p>\n<p>新模式中,一个模块就是一个页面,包括头,尾和中间内容部分,头和尾都是固定的, 中间界面部分需要建一个对应的js来渲染界面,该js继承要自TSWidget. 访问时通过 模块名.do来访问．该模块中还会有很多其他请求,比如新增, 删除等,这些请示对应的后台是继承自BaseController的一个文件名为 模块名 + Controller.php的文件, 该模块中有对应操作的各方法, 在各方法中操作数据库, 并将结果赋值给$this-&gt;data即可，访问时通过 模块名!方法名.do来访问,返回一个由Controller中方法中$this-&gt;data转成的json字符, 返回到前台处理．</p>\n<p>下节再见</p>\n","excerpt":"","more":"<p>最近要使用Zabbix做二次开发, 实在无力吐槽..  </p>\n<p>1, 界面丑陋(3版本的还好些), 二版本的简直就是上个世纪的界面, 看着就没有做的心情. </p>\n<p>2, 用户体验差,选择个下列框界面都要刷一次, 几乎所有的操作都是用提交本页刷新来完成. </p>\n<p>3, ui框架是用php后台做的, 面向对象的类继承结构,这个思想倒是不错, 让我想起了java的zk框架,但是做的远没有zk完善, 特别是对事件的处理上, 绝大多数还是要依赖嵌入的js文件来对dom操作. 组件的功能绝大多只是对对html元素做了个封装,实用的功能很少. 基本上也是鸡肋. 这也造成了前端后台耦合非常的深, 非常不利于前后端分离开发.</p>\n<p>4,后台控制器实现繁琐. 系统中的后台请求分两种模式, 一种是在单个php文件中根据参数的不同用if来判断走不同的分枝,非常的乱,再加上php的调试模式, 调试起来非常的麻烦. 另一种是写一个类文件继承CController, 一个请求要对应一个php文件,还要在CRouter中配置, 也比较繁琐</p>\n<p>针对以上情况,我们采取的方式是,原有功能仍保持zabbix原来的模式,新增加的功能则使用前后台分离的模式,要采用我们自己的前端js框架,前端只负责前端界面展示及操作,后台只负责后台操作,然后返回给前端json数据,两者之间只有数据的交互. 为了使用这种模式,除了引入前端的框架,还要对后台的mvc架构进行改进, 原先的后台模式分两种,一种是非mvc模式,直接在php文件中根据传来的参数简单的判断,非常的乱. 另一种是mvc模式,缺点一个请求要对应一个控制器文件,还要在手配置文件中手动的配置一下,开发比较繁琐. 针对以上两种模式的缺点, 在第二种mvc模式基础之上改进了一个新的mvc模式,即一个模块只要建一个前端js文件和后台的一个继承了BaseController的控制器即可,该模块里所有的操作都是做为该控制器的成员方法存在的,类似java的struts2.</p>\n<p>新模式中,一个模块就是一个页面,包括头,尾和中间内容部分,头和尾都是固定的, 中间界面部分需要建一个对应的js来渲染界面,该js继承要自TSWidget. 访问时通过 模块名.do来访问．该模块中还会有很多其他请求,比如新增, 删除等,这些请示对应的后台是继承自BaseController的一个文件名为 模块名 + Controller.php的文件, 该模块中有对应操作的各方法, 在各方法中操作数据库, 并将结果赋值给$this-&gt;data即可，访问时通过 模块名!方法名.do来访问,返回一个由Controller中方法中$this-&gt;data转成的json字符, 返回到前台处理．</p>\n<p>下节再见</p>\n"},{"title":"Zabbix架构的改进方案(二)","date":"2016-03-12T15:01:52.000Z","_content":"\n比如要做一个用户管理模块UserManager,  通过UserManager.do访问主页面, 而新增用户的地址为UserManager!add.do, 删除用户的后台请求地址为UserManager!delete.do\n\n1, 建一个后台php文件继承BaseController,名为UserManagerController.php\n\t\n~~~javascript\n// \nclass UserManagerController extends BaseController {\n      \n    function userList() {        // 用户列表,通过UserManager!userList.do来访问\n        $this->data = [\n                [\n                        'username' => 'sun',\n                        'sex' => 'f'\n                ], [\n                        'username' => 'aaa',\n                        'sex' => 'f'\n                ], [\n                        'username' => 'aaa',\n                        'sex' => 'f'\n                ], [\n                        'username' => 'aaa',\n                        'sex' => 'f'\n                ]\n        ];\n    }\n      \n    function add() {        // 新增用户,通过UserManager!add.do来访问\n        $this->data = [\n                'success'=> true,\n                'msg'=>'add success'\n        ];\n    }\n      \n    function delete() {        // 删除用户,通过UserManager!delete.do来访问\n        $this->data = [\n                'success'=> true,\n                'msg'=>'delete success'\n        ];\n    }\n}\n~~~\n\n如果需要权限控制,则在该Controller中重写父类方法(默认是管理员及以上可以访问)\n~~~javascript\nfunction checkPermissions() {\n    return ($this->getUserType() >= USER_TYPE_ZABBIX_ADMIN);\n}\n~~~\n\n\n效果: \n访问 http://localhost/dam/UserManager!userList.do时返回灵气如下\n~~~javascript\n[\n\t{\"username\":\"sun\",\"sex\":\"f\"},\n\t{\"username\":\"aaa\",\"sex\":\"f\"},\n\t{\"username\":\"aaa\",\"sex\":\"f\"},\n\t{\"username\":\"aaa\",\"sex\":\"f\"},\n]\n~~~\n\n\n2, 建一个对应前端的js文件，名为UserManager.js, 继承自TSWidget或TSWidget的子类\n~~~javascript\n// demo\ndefine(\"js/widgets/UserManager\", [\n   \"ts/widgets/TSDataGrid\",\n   \"ts/widgets/TSGridColumn\",\n   \"ts/widgets/TSButton\",\n   'ts/widgets/GenericDialog',\n], function(TSDataGrid, TSGridColumn, TSButton, Dialog){\n     \n    var i18n=TSDataGrid.prototype.i18n.createBranch({});\n    function UserManager(opts){\n        TSDataGrid.call(this);\n         \n        this.dataSource = 'UserManager!userList.do';\n        defineProperties.call(this);\n    }\n     \n    function defineProperties(){\n        var self=this;\n        var username=new TSGridColumn({\n            dataField:\"username\",\n            headerText:'username',\n            width:250,\n        });\n         \n        var sex=new TSGridColumn({\n            dataField:\"sex\",\n            headerText:'sex',\n            width:250,\n        });\n \n        this.columns=[username, sex];\n        this.actions = [new TSButton({\n            name:\"测试\",\n            buttonName:'测试',\n            iconClass:\"glyphicon glyphicon-plus\",\n            click:function(){\n                Dialog.create({\n                    title: 'fdafds'\n                })\n                 \n            }\n        })];\n        this.usePager=true;\n        this.checkable=false;\n        this.showToolbar=true;\n        this.showFooter=true;\n    }\n     \n    ExtendClass(UserManager, TSDataGrid);\n     \n    return UserManager;\n     \n});\n~~~\n\n\n\n如果想加到菜单里，则在menu.inc.php中配置下\n~~~javascript\n], [\n    'label' => _('测试demo'),\n    'url' => 'UserManager.do',\n    'active_if' => ['UserManager'],\n],[\n~~~\n\n\n","source":"_posts/zabbx2.md","raw":"---\ntitle: Zabbix架构的改进方案(二)\ndate: 2016-03-12 23:01:52\ntags:\n---\n\n比如要做一个用户管理模块UserManager,  通过UserManager.do访问主页面, 而新增用户的地址为UserManager!add.do, 删除用户的后台请求地址为UserManager!delete.do\n\n1, 建一个后台php文件继承BaseController,名为UserManagerController.php\n\t\n~~~javascript\n// \nclass UserManagerController extends BaseController {\n      \n    function userList() {        // 用户列表,通过UserManager!userList.do来访问\n        $this->data = [\n                [\n                        'username' => 'sun',\n                        'sex' => 'f'\n                ], [\n                        'username' => 'aaa',\n                        'sex' => 'f'\n                ], [\n                        'username' => 'aaa',\n                        'sex' => 'f'\n                ], [\n                        'username' => 'aaa',\n                        'sex' => 'f'\n                ]\n        ];\n    }\n      \n    function add() {        // 新增用户,通过UserManager!add.do来访问\n        $this->data = [\n                'success'=> true,\n                'msg'=>'add success'\n        ];\n    }\n      \n    function delete() {        // 删除用户,通过UserManager!delete.do来访问\n        $this->data = [\n                'success'=> true,\n                'msg'=>'delete success'\n        ];\n    }\n}\n~~~\n\n如果需要权限控制,则在该Controller中重写父类方法(默认是管理员及以上可以访问)\n~~~javascript\nfunction checkPermissions() {\n    return ($this->getUserType() >= USER_TYPE_ZABBIX_ADMIN);\n}\n~~~\n\n\n效果: \n访问 http://localhost/dam/UserManager!userList.do时返回灵气如下\n~~~javascript\n[\n\t{\"username\":\"sun\",\"sex\":\"f\"},\n\t{\"username\":\"aaa\",\"sex\":\"f\"},\n\t{\"username\":\"aaa\",\"sex\":\"f\"},\n\t{\"username\":\"aaa\",\"sex\":\"f\"},\n]\n~~~\n\n\n2, 建一个对应前端的js文件，名为UserManager.js, 继承自TSWidget或TSWidget的子类\n~~~javascript\n// demo\ndefine(\"js/widgets/UserManager\", [\n   \"ts/widgets/TSDataGrid\",\n   \"ts/widgets/TSGridColumn\",\n   \"ts/widgets/TSButton\",\n   'ts/widgets/GenericDialog',\n], function(TSDataGrid, TSGridColumn, TSButton, Dialog){\n     \n    var i18n=TSDataGrid.prototype.i18n.createBranch({});\n    function UserManager(opts){\n        TSDataGrid.call(this);\n         \n        this.dataSource = 'UserManager!userList.do';\n        defineProperties.call(this);\n    }\n     \n    function defineProperties(){\n        var self=this;\n        var username=new TSGridColumn({\n            dataField:\"username\",\n            headerText:'username',\n            width:250,\n        });\n         \n        var sex=new TSGridColumn({\n            dataField:\"sex\",\n            headerText:'sex',\n            width:250,\n        });\n \n        this.columns=[username, sex];\n        this.actions = [new TSButton({\n            name:\"测试\",\n            buttonName:'测试',\n            iconClass:\"glyphicon glyphicon-plus\",\n            click:function(){\n                Dialog.create({\n                    title: 'fdafds'\n                })\n                 \n            }\n        })];\n        this.usePager=true;\n        this.checkable=false;\n        this.showToolbar=true;\n        this.showFooter=true;\n    }\n     \n    ExtendClass(UserManager, TSDataGrid);\n     \n    return UserManager;\n     \n});\n~~~\n\n\n\n如果想加到菜单里，则在menu.inc.php中配置下\n~~~javascript\n], [\n    'label' => _('测试demo'),\n    'url' => 'UserManager.do',\n    'active_if' => ['UserManager'],\n],[\n~~~\n\n\n","slug":"zabbx2","published":1,"updated":"2016-09-08T11:21:44.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisu97pou0006vkpv3bpib09v","content":"<p>比如要做一个用户管理模块UserManager,  通过UserManager.do访问主页面, 而新增用户的地址为UserManager!add.do, 删除用户的后台请求地址为UserManager!delete.do</p>\n<p>1, 建一个后台php文件继承BaseController,名为UserManagerController.php</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserManagerController</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseController</span> </span>&#123;</div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">userList</span>(<span class=\"params\"></span>) </span>&#123;        <span class=\"comment\">// 用户列表,通过UserManager!userList.do来访问</span></div><div class=\"line\">        $<span class=\"keyword\">this</span>-&gt;data = [</div><div class=\"line\">                [</div><div class=\"line\">                        <span class=\"string\">'username'</span> =&gt; <span class=\"string\">'sun'</span>,</div><div class=\"line\">                        <span class=\"string\">'sex'</span> =&gt; <span class=\"string\">'f'</span></div><div class=\"line\">                ], [</div><div class=\"line\">                        <span class=\"string\">'username'</span> =&gt; <span class=\"string\">'aaa'</span>,</div><div class=\"line\">                        <span class=\"string\">'sex'</span> =&gt; <span class=\"string\">'f'</span></div><div class=\"line\">                ], [</div><div class=\"line\">                        <span class=\"string\">'username'</span> =&gt; <span class=\"string\">'aaa'</span>,</div><div class=\"line\">                        <span class=\"string\">'sex'</span> =&gt; <span class=\"string\">'f'</span></div><div class=\"line\">                ], [</div><div class=\"line\">                        <span class=\"string\">'username'</span> =&gt; <span class=\"string\">'aaa'</span>,</div><div class=\"line\">                        <span class=\"string\">'sex'</span> =&gt; <span class=\"string\">'f'</span></div><div class=\"line\">                ]</div><div class=\"line\">        ];</div><div class=\"line\">    &#125;</div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>) </span>&#123;        <span class=\"comment\">// 新增用户,通过UserManager!add.do来访问</span></div><div class=\"line\">        $<span class=\"keyword\">this</span>-&gt;data = [</div><div class=\"line\">                <span class=\"string\">'success'</span>=&gt; <span class=\"literal\">true</span>,</div><div class=\"line\">                <span class=\"string\">'msg'</span>=&gt;<span class=\"string\">'add success'</span></div><div class=\"line\">        ];</div><div class=\"line\">    &#125;</div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delete</span>(<span class=\"params\"></span>) </span>&#123;        <span class=\"comment\">// 删除用户,通过UserManager!delete.do来访问</span></div><div class=\"line\">        $<span class=\"keyword\">this</span>-&gt;data = [</div><div class=\"line\">                <span class=\"string\">'success'</span>=&gt; <span class=\"literal\">true</span>,</div><div class=\"line\">                <span class=\"string\">'msg'</span>=&gt;<span class=\"string\">'delete success'</span></div><div class=\"line\">        ];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果需要权限控制,则在该Controller中重写父类方法(默认是管理员及以上可以访问)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPermissions</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ($<span class=\"keyword\">this</span>-&gt;getUserType() &gt;= USER_TYPE_ZABBIX_ADMIN);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>效果:<br>访问 <a href=\"http://localhost/dam/UserManager!userList.do时返回灵气如下\" target=\"_blank\" rel=\"external\">http://localhost/dam/UserManager!userList.do时返回灵气如下</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">\t&#123;<span class=\"string\">\"username\"</span>:<span class=\"string\">\"sun\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"f\"</span>&#125;,</div><div class=\"line\">\t&#123;<span class=\"string\">\"username\"</span>:<span class=\"string\">\"aaa\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"f\"</span>&#125;,</div><div class=\"line\">\t&#123;<span class=\"string\">\"username\"</span>:<span class=\"string\">\"aaa\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"f\"</span>&#125;,</div><div class=\"line\">\t&#123;<span class=\"string\">\"username\"</span>:<span class=\"string\">\"aaa\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"f\"</span>&#125;,</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>2, 建一个对应前端的js文件，名为UserManager.js, 继承自TSWidget或TSWidget的子类<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// demo</span></div><div class=\"line\">define(<span class=\"string\">\"js/widgets/UserManager\"</span>, [</div><div class=\"line\">   <span class=\"string\">\"ts/widgets/TSDataGrid\"</span>,</div><div class=\"line\">   <span class=\"string\">\"ts/widgets/TSGridColumn\"</span>,</div><div class=\"line\">   <span class=\"string\">\"ts/widgets/TSButton\"</span>,</div><div class=\"line\">   <span class=\"string\">'ts/widgets/GenericDialog'</span>,</div><div class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">TSDataGrid, TSGridColumn, TSButton, Dialog</span>)</span>&#123;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"keyword\">var</span> i18n=TSDataGrid.prototype.i18n.createBranch(&#123;&#125;);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UserManager</span>(<span class=\"params\">opts</span>)</span>&#123;</div><div class=\"line\">        TSDataGrid.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">         </div><div class=\"line\">        <span class=\"keyword\">this</span>.dataSource = <span class=\"string\">'UserManager!userList.do'</span>;</div><div class=\"line\">        defineProperties.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineProperties</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> self=<span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"keyword\">var</span> username=<span class=\"keyword\">new</span> TSGridColumn(&#123;</div><div class=\"line\">            dataField:<span class=\"string\">\"username\"</span>,</div><div class=\"line\">            headerText:<span class=\"string\">'username'</span>,</div><div class=\"line\">            width:<span class=\"number\">250</span>,</div><div class=\"line\">        &#125;);</div><div class=\"line\">         </div><div class=\"line\">        <span class=\"keyword\">var</span> sex=<span class=\"keyword\">new</span> TSGridColumn(&#123;</div><div class=\"line\">            dataField:<span class=\"string\">\"sex\"</span>,</div><div class=\"line\">            headerText:<span class=\"string\">'sex'</span>,</div><div class=\"line\">            width:<span class=\"number\">250</span>,</div><div class=\"line\">        &#125;);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">this</span>.columns=[username, sex];</div><div class=\"line\">        <span class=\"keyword\">this</span>.actions = [<span class=\"keyword\">new</span> TSButton(&#123;</div><div class=\"line\">            name:<span class=\"string\">\"测试\"</span>,</div><div class=\"line\">            buttonName:<span class=\"string\">'测试'</span>,</div><div class=\"line\">            iconClass:<span class=\"string\">\"glyphicon glyphicon-plus\"</span>,</div><div class=\"line\">            click:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                Dialog.create(&#123;</div><div class=\"line\">                    title: <span class=\"string\">'fdafds'</span></div><div class=\"line\">                &#125;)</div><div class=\"line\">                 </div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)];</div><div class=\"line\">        <span class=\"keyword\">this</span>.usePager=<span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.checkable=<span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.showToolbar=<span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.showFooter=<span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    ExtendClass(UserManager, TSDataGrid);</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"keyword\">return</span> UserManager;</div><div class=\"line\">     </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果想加到菜单里，则在menu.inc.php中配置下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">], [</div><div class=\"line\">    <span class=\"string\">'label'</span> =&gt; _(<span class=\"string\">'测试demo'</span>),</div><div class=\"line\">    <span class=\"string\">'url'</span> =&gt; <span class=\"string\">'UserManager.do'</span>,</div><div class=\"line\">    <span class=\"string\">'active_if'</span> =&gt; [<span class=\"string\">'UserManager'</span>],</div><div class=\"line\">],[</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>比如要做一个用户管理模块UserManager,  通过UserManager.do访问主页面, 而新增用户的地址为UserManager!add.do, 删除用户的后台请求地址为UserManager!delete.do</p>\n<p>1, 建一个后台php文件继承BaseController,名为UserManagerController.php</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserManagerController</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseController</span> </span>&#123;</div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">userList</span>(<span class=\"params\"></span>) </span>&#123;        <span class=\"comment\">// 用户列表,通过UserManager!userList.do来访问</span></div><div class=\"line\">        $<span class=\"keyword\">this</span>-&gt;data = [</div><div class=\"line\">                [</div><div class=\"line\">                        <span class=\"string\">'username'</span> =&gt; <span class=\"string\">'sun'</span>,</div><div class=\"line\">                        <span class=\"string\">'sex'</span> =&gt; <span class=\"string\">'f'</span></div><div class=\"line\">                ], [</div><div class=\"line\">                        <span class=\"string\">'username'</span> =&gt; <span class=\"string\">'aaa'</span>,</div><div class=\"line\">                        <span class=\"string\">'sex'</span> =&gt; <span class=\"string\">'f'</span></div><div class=\"line\">                ], [</div><div class=\"line\">                        <span class=\"string\">'username'</span> =&gt; <span class=\"string\">'aaa'</span>,</div><div class=\"line\">                        <span class=\"string\">'sex'</span> =&gt; <span class=\"string\">'f'</span></div><div class=\"line\">                ], [</div><div class=\"line\">                        <span class=\"string\">'username'</span> =&gt; <span class=\"string\">'aaa'</span>,</div><div class=\"line\">                        <span class=\"string\">'sex'</span> =&gt; <span class=\"string\">'f'</span></div><div class=\"line\">                ]</div><div class=\"line\">        ];</div><div class=\"line\">    &#125;</div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>) </span>&#123;        <span class=\"comment\">// 新增用户,通过UserManager!add.do来访问</span></div><div class=\"line\">        $<span class=\"keyword\">this</span>-&gt;data = [</div><div class=\"line\">                <span class=\"string\">'success'</span>=&gt; <span class=\"literal\">true</span>,</div><div class=\"line\">                <span class=\"string\">'msg'</span>=&gt;<span class=\"string\">'add success'</span></div><div class=\"line\">        ];</div><div class=\"line\">    &#125;</div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delete</span>(<span class=\"params\"></span>) </span>&#123;        <span class=\"comment\">// 删除用户,通过UserManager!delete.do来访问</span></div><div class=\"line\">        $<span class=\"keyword\">this</span>-&gt;data = [</div><div class=\"line\">                <span class=\"string\">'success'</span>=&gt; <span class=\"literal\">true</span>,</div><div class=\"line\">                <span class=\"string\">'msg'</span>=&gt;<span class=\"string\">'delete success'</span></div><div class=\"line\">        ];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果需要权限控制,则在该Controller中重写父类方法(默认是管理员及以上可以访问)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPermissions</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ($<span class=\"keyword\">this</span>-&gt;getUserType() &gt;= USER_TYPE_ZABBIX_ADMIN);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>效果:<br>访问 <a href=\"http://localhost/dam/UserManager!userList.do时返回灵气如下\">http://localhost/dam/UserManager!userList.do时返回灵气如下</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">\t&#123;<span class=\"string\">\"username\"</span>:<span class=\"string\">\"sun\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"f\"</span>&#125;,</div><div class=\"line\">\t&#123;<span class=\"string\">\"username\"</span>:<span class=\"string\">\"aaa\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"f\"</span>&#125;,</div><div class=\"line\">\t&#123;<span class=\"string\">\"username\"</span>:<span class=\"string\">\"aaa\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"f\"</span>&#125;,</div><div class=\"line\">\t&#123;<span class=\"string\">\"username\"</span>:<span class=\"string\">\"aaa\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"f\"</span>&#125;,</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>2, 建一个对应前端的js文件，名为UserManager.js, 继承自TSWidget或TSWidget的子类<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// demo</span></div><div class=\"line\">define(<span class=\"string\">\"js/widgets/UserManager\"</span>, [</div><div class=\"line\">   <span class=\"string\">\"ts/widgets/TSDataGrid\"</span>,</div><div class=\"line\">   <span class=\"string\">\"ts/widgets/TSGridColumn\"</span>,</div><div class=\"line\">   <span class=\"string\">\"ts/widgets/TSButton\"</span>,</div><div class=\"line\">   <span class=\"string\">'ts/widgets/GenericDialog'</span>,</div><div class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">TSDataGrid, TSGridColumn, TSButton, Dialog</span>)</span>&#123;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"keyword\">var</span> i18n=TSDataGrid.prototype.i18n.createBranch(&#123;&#125;);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UserManager</span>(<span class=\"params\">opts</span>)</span>&#123;</div><div class=\"line\">        TSDataGrid.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">         </div><div class=\"line\">        <span class=\"keyword\">this</span>.dataSource = <span class=\"string\">'UserManager!userList.do'</span>;</div><div class=\"line\">        defineProperties.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineProperties</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> self=<span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"keyword\">var</span> username=<span class=\"keyword\">new</span> TSGridColumn(&#123;</div><div class=\"line\">            dataField:<span class=\"string\">\"username\"</span>,</div><div class=\"line\">            headerText:<span class=\"string\">'username'</span>,</div><div class=\"line\">            width:<span class=\"number\">250</span>,</div><div class=\"line\">        &#125;);</div><div class=\"line\">         </div><div class=\"line\">        <span class=\"keyword\">var</span> sex=<span class=\"keyword\">new</span> TSGridColumn(&#123;</div><div class=\"line\">            dataField:<span class=\"string\">\"sex\"</span>,</div><div class=\"line\">            headerText:<span class=\"string\">'sex'</span>,</div><div class=\"line\">            width:<span class=\"number\">250</span>,</div><div class=\"line\">        &#125;);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">this</span>.columns=[username, sex];</div><div class=\"line\">        <span class=\"keyword\">this</span>.actions = [<span class=\"keyword\">new</span> TSButton(&#123;</div><div class=\"line\">            name:<span class=\"string\">\"测试\"</span>,</div><div class=\"line\">            buttonName:<span class=\"string\">'测试'</span>,</div><div class=\"line\">            iconClass:<span class=\"string\">\"glyphicon glyphicon-plus\"</span>,</div><div class=\"line\">            click:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                Dialog.create(&#123;</div><div class=\"line\">                    title: <span class=\"string\">'fdafds'</span></div><div class=\"line\">                &#125;)</div><div class=\"line\">                 </div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)];</div><div class=\"line\">        <span class=\"keyword\">this</span>.usePager=<span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.checkable=<span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.showToolbar=<span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.showFooter=<span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    ExtendClass(UserManager, TSDataGrid);</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"keyword\">return</span> UserManager;</div><div class=\"line\">     </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果想加到菜单里，则在menu.inc.php中配置下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">], [</div><div class=\"line\">    <span class=\"string\">'label'</span> =&gt; _(<span class=\"string\">'测试demo'</span>),</div><div class=\"line\">    <span class=\"string\">'url'</span> =&gt; <span class=\"string\">'UserManager.do'</span>,</div><div class=\"line\">    <span class=\"string\">'active_if'</span> =&gt; [<span class=\"string\">'UserManager'</span>],</div><div class=\"line\">],[</div></pre></td></tr></table></figure></p>\n"},{"title":"Zabbix架构的改进方案(三)","date":"2016-03-26T13:40:54.000Z","_content":"\n由于此次改进涉及不少内部框架的, 如果都介绍出来篇幅太长,所以这里只介绍下对zabbix的封装的新控制器BaseController.php, 原理也很简单,就是根据传来的method参数名, 去执行对应的方法\n\n~~~javascript\nclass BaseController extends CController {\n \n    protected $data = [];\n    protected $title = '';\n    protected function init() {\n        $this->disableSIDValidation();\n    }\n     \n    protected function checkInput() {\n        return true;\n    }\n \n    protected function checkPermissions() {\n        return ($this->getUserType() >= USER_TYPE_ZABBIX_ADMIN);\n    }\n     \n    protected function doAction() {\n        $method = getRequest('method');\n \n        if($method == null) {\n            $this->sendResponse();\n            return;\n        }\n         \n        if((is_callable(array($this, $method)))) {\n            $this->$method();\n            $this->sendResponse();\n        } else {\n            throw new Exception('cant find this method'.$method);//, $code, $previous)\n        }\n    }\n     \n    protected function sendResponse() {\n        $response = new CControllerResponseData($this->data);\n        $response->setTitle($this->title);\n        $this->setResponse($response);\n    }\n     \n}\n~~~\n\n在该文件中, 重写了父类CController 中的doAction方法\n\n接收地址传来的method\n~~~javascript\n$method = getRequest('method');\n~~~\n\n\n对$method非空处理\n~~~javascript\nif($method == null) {\n    $this->sendResponse();\n    return;\n}\n~~~\n\n\n处理当前控制器中存在从地址传来的方法, 刚去执行该方法, 并sendResponse, 否则给出无法找到方法的报错\n~~~javascript\nif((is_callable(array($this, $method)))) {\n    $this->$method();\n    $this->sendResponse();\n} else {\n    throw new Exception('cant find this method'.$method);//, $code, $previous)\n}\n~~~\n\n在权限的处理上, 是重写了父类中的checkPermissions(父类是是默认false,无权限), 这里默认是当前用户类型大于等管理员,如果权限和需求不一定, 请在子类控制器中重写该方法 \n\n~~~javascript\nprotected function checkPermissions() {\n    return ($this->getUserType() >= USER_TYPE_ZABBIX_ADMIN);\n}\n~~~\n\n打完收工","source":"_posts/zabbx3.md","raw":"---\ntitle: Zabbix架构的改进方案(三)\ndate: 2016-03-26 21:40:54\ntags:\n---\n\n由于此次改进涉及不少内部框架的, 如果都介绍出来篇幅太长,所以这里只介绍下对zabbix的封装的新控制器BaseController.php, 原理也很简单,就是根据传来的method参数名, 去执行对应的方法\n\n~~~javascript\nclass BaseController extends CController {\n \n    protected $data = [];\n    protected $title = '';\n    protected function init() {\n        $this->disableSIDValidation();\n    }\n     \n    protected function checkInput() {\n        return true;\n    }\n \n    protected function checkPermissions() {\n        return ($this->getUserType() >= USER_TYPE_ZABBIX_ADMIN);\n    }\n     \n    protected function doAction() {\n        $method = getRequest('method');\n \n        if($method == null) {\n            $this->sendResponse();\n            return;\n        }\n         \n        if((is_callable(array($this, $method)))) {\n            $this->$method();\n            $this->sendResponse();\n        } else {\n            throw new Exception('cant find this method'.$method);//, $code, $previous)\n        }\n    }\n     \n    protected function sendResponse() {\n        $response = new CControllerResponseData($this->data);\n        $response->setTitle($this->title);\n        $this->setResponse($response);\n    }\n     \n}\n~~~\n\n在该文件中, 重写了父类CController 中的doAction方法\n\n接收地址传来的method\n~~~javascript\n$method = getRequest('method');\n~~~\n\n\n对$method非空处理\n~~~javascript\nif($method == null) {\n    $this->sendResponse();\n    return;\n}\n~~~\n\n\n处理当前控制器中存在从地址传来的方法, 刚去执行该方法, 并sendResponse, 否则给出无法找到方法的报错\n~~~javascript\nif((is_callable(array($this, $method)))) {\n    $this->$method();\n    $this->sendResponse();\n} else {\n    throw new Exception('cant find this method'.$method);//, $code, $previous)\n}\n~~~\n\n在权限的处理上, 是重写了父类中的checkPermissions(父类是是默认false,无权限), 这里默认是当前用户类型大于等管理员,如果权限和需求不一定, 请在子类控制器中重写该方法 \n\n~~~javascript\nprotected function checkPermissions() {\n    return ($this->getUserType() >= USER_TYPE_ZABBIX_ADMIN);\n}\n~~~\n\n打完收工","slug":"zabbx3","published":1,"updated":"2016-09-08T11:22:06.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisu97pow0007vkpvsrpnqdi0","content":"<p>由于此次改进涉及不少内部框架的, 如果都介绍出来篇幅太长,所以这里只介绍下对zabbix的封装的新控制器BaseController.php, 原理也很简单,就是根据传来的method参数名, 去执行对应的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseController</span> <span class=\"keyword\">extends</span> <span class=\"title\">CController</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    protected $data = [];</div><div class=\"line\">    protected $title = <span class=\"string\">''</span>;</div><div class=\"line\">    protected <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $<span class=\"keyword\">this</span>-&gt;disableSIDValidation();</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    protected <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkInput</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    protected <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPermissions</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ($<span class=\"keyword\">this</span>-&gt;getUserType() &gt;= USER_TYPE_ZABBIX_ADMIN);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    protected <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAction</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $method = getRequest(<span class=\"string\">'method'</span>);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">if</span>($method == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">            $<span class=\"keyword\">this</span>-&gt;sendResponse();</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">         </div><div class=\"line\">        <span class=\"keyword\">if</span>((is_callable(array($<span class=\"keyword\">this</span>, $method)))) &#123;</div><div class=\"line\">            $<span class=\"keyword\">this</span>-&gt;$method();</div><div class=\"line\">            $<span class=\"keyword\">this</span>-&gt;sendResponse();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">'cant find this method'</span>.$method);<span class=\"comment\">//, $code, $previous)</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    protected <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendResponse</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $response = <span class=\"keyword\">new</span> CControllerResponseData($<span class=\"keyword\">this</span>-&gt;data);</div><div class=\"line\">        $response-&gt;setTitle($<span class=\"keyword\">this</span>-&gt;title);</div><div class=\"line\">        $<span class=\"keyword\">this</span>-&gt;setResponse($response);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在该文件中, 重写了父类CController 中的doAction方法</p>\n<p>接收地址传来的method<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$method = getRequest(<span class=\"string\">'method'</span>);</div></pre></td></tr></table></figure></p>\n<p>对$method非空处理<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>($method == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">    $<span class=\"keyword\">this</span>-&gt;sendResponse();</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>处理当前控制器中存在从地址传来的方法, 刚去执行该方法, 并sendResponse, 否则给出无法找到方法的报错<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>((is_callable(array($<span class=\"keyword\">this</span>, $method)))) &#123;</div><div class=\"line\">    $<span class=\"keyword\">this</span>-&gt;$method();</div><div class=\"line\">    $<span class=\"keyword\">this</span>-&gt;sendResponse();</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">'cant find this method'</span>.$method);<span class=\"comment\">//, $code, $previous)</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在权限的处理上, 是重写了父类中的checkPermissions(父类是是默认false,无权限), 这里默认是当前用户类型大于等管理员,如果权限和需求不一定, 请在子类控制器中重写该方法 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPermissions</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ($<span class=\"keyword\">this</span>-&gt;getUserType() &gt;= USER_TYPE_ZABBIX_ADMIN);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>打完收工</p>\n","excerpt":"","more":"<p>由于此次改进涉及不少内部框架的, 如果都介绍出来篇幅太长,所以这里只介绍下对zabbix的封装的新控制器BaseController.php, 原理也很简单,就是根据传来的method参数名, 去执行对应的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseController</span> <span class=\"keyword\">extends</span> <span class=\"title\">CController</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    protected $data = [];</div><div class=\"line\">    protected $title = <span class=\"string\">''</span>;</div><div class=\"line\">    protected <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $<span class=\"keyword\">this</span>-&gt;disableSIDValidation();</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    protected <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkInput</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    protected <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPermissions</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ($<span class=\"keyword\">this</span>-&gt;getUserType() &gt;= USER_TYPE_ZABBIX_ADMIN);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    protected <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAction</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $method = getRequest(<span class=\"string\">'method'</span>);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">if</span>($method == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">            $<span class=\"keyword\">this</span>-&gt;sendResponse();</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">         </div><div class=\"line\">        <span class=\"keyword\">if</span>((is_callable(array($<span class=\"keyword\">this</span>, $method)))) &#123;</div><div class=\"line\">            $<span class=\"keyword\">this</span>-&gt;$method();</div><div class=\"line\">            $<span class=\"keyword\">this</span>-&gt;sendResponse();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">'cant find this method'</span>.$method);<span class=\"comment\">//, $code, $previous)</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    protected <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendResponse</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $response = <span class=\"keyword\">new</span> CControllerResponseData($<span class=\"keyword\">this</span>-&gt;data);</div><div class=\"line\">        $response-&gt;setTitle($<span class=\"keyword\">this</span>-&gt;title);</div><div class=\"line\">        $<span class=\"keyword\">this</span>-&gt;setResponse($response);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在该文件中, 重写了父类CController 中的doAction方法</p>\n<p>接收地址传来的method<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$method = getRequest(<span class=\"string\">'method'</span>);</div></pre></td></tr></table></figure></p>\n<p>对$method非空处理<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>($method == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">    $<span class=\"keyword\">this</span>-&gt;sendResponse();</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>处理当前控制器中存在从地址传来的方法, 刚去执行该方法, 并sendResponse, 否则给出无法找到方法的报错<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>((is_callable(array($<span class=\"keyword\">this</span>, $method)))) &#123;</div><div class=\"line\">    $<span class=\"keyword\">this</span>-&gt;$method();</div><div class=\"line\">    $<span class=\"keyword\">this</span>-&gt;sendResponse();</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">'cant find this method'</span>.$method);<span class=\"comment\">//, $code, $previous)</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在权限的处理上, 是重写了父类中的checkPermissions(父类是是默认false,无权限), 这里默认是当前用户类型大于等管理员,如果权限和需求不一定, 请在子类控制器中重写该方法 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPermissions</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ($<span class=\"keyword\">this</span>-&gt;getUserType() &gt;= USER_TYPE_ZABBIX_ADMIN);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>打完收工</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}